// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StageAuthenticatorDuo extends pulumi.CustomResource {
    /**
     * Get an existing StageAuthenticatorDuo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StageAuthenticatorDuoState, opts?: pulumi.CustomResourceOptions): StageAuthenticatorDuo {
        return new StageAuthenticatorDuo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/stageAuthenticatorDuo:StageAuthenticatorDuo';

    /**
     * Returns true if the given object is an instance of StageAuthenticatorDuo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StageAuthenticatorDuo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StageAuthenticatorDuo.__pulumiType;
    }

    declare public readonly adminIntegrationKey: pulumi.Output<string | undefined>;
    declare public readonly adminSecretKey: pulumi.Output<string | undefined>;
    declare public readonly apiHostname: pulumi.Output<string>;
    declare public readonly clientId: pulumi.Output<string>;
    declare public readonly clientSecret: pulumi.Output<string>;
    declare public readonly configureFlow: pulumi.Output<string | undefined>;
    declare public readonly friendlyName: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly stageAuthenticatorDuoId: pulumi.Output<string>;

    /**
     * Create a StageAuthenticatorDuo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StageAuthenticatorDuoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StageAuthenticatorDuoArgs | StageAuthenticatorDuoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StageAuthenticatorDuoState | undefined;
            resourceInputs["adminIntegrationKey"] = state?.adminIntegrationKey;
            resourceInputs["adminSecretKey"] = state?.adminSecretKey;
            resourceInputs["apiHostname"] = state?.apiHostname;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["clientSecret"] = state?.clientSecret;
            resourceInputs["configureFlow"] = state?.configureFlow;
            resourceInputs["friendlyName"] = state?.friendlyName;
            resourceInputs["name"] = state?.name;
            resourceInputs["stageAuthenticatorDuoId"] = state?.stageAuthenticatorDuoId;
        } else {
            const args = argsOrState as StageAuthenticatorDuoArgs | undefined;
            if (args?.apiHostname === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiHostname'");
            }
            if (args?.clientId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if (args?.clientSecret === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientSecret'");
            }
            resourceInputs["adminIntegrationKey"] = args?.adminIntegrationKey;
            resourceInputs["adminSecretKey"] = args?.adminSecretKey ? pulumi.secret(args.adminSecretKey) : undefined;
            resourceInputs["apiHostname"] = args?.apiHostname;
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["configureFlow"] = args?.configureFlow;
            resourceInputs["friendlyName"] = args?.friendlyName;
            resourceInputs["name"] = args?.name;
            resourceInputs["stageAuthenticatorDuoId"] = args?.stageAuthenticatorDuoId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminSecretKey", "clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(StageAuthenticatorDuo.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StageAuthenticatorDuo resources.
 */
export interface StageAuthenticatorDuoState {
    adminIntegrationKey?: pulumi.Input<string>;
    adminSecretKey?: pulumi.Input<string>;
    apiHostname?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    configureFlow?: pulumi.Input<string>;
    friendlyName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    stageAuthenticatorDuoId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StageAuthenticatorDuo resource.
 */
export interface StageAuthenticatorDuoArgs {
    adminIntegrationKey?: pulumi.Input<string>;
    adminSecretKey?: pulumi.Input<string>;
    apiHostname: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    clientSecret: pulumi.Input<string>;
    configureFlow?: pulumi.Input<string>;
    friendlyName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    stageAuthenticatorDuoId?: pulumi.Input<string>;
}
