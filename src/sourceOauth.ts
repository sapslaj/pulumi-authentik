// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SourceOauth extends pulumi.CustomResource {
    /**
     * Get an existing SourceOauth resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourceOauthState, opts?: pulumi.CustomResourceOptions): SourceOauth {
        return new SourceOauth(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/sourceOauth:SourceOauth';

    /**
     * Returns true if the given object is an instance of SourceOauth.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SourceOauth {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceOauth.__pulumiType;
    }

    /**
     * Only required for OAuth1.
     */
    declare public readonly accessTokenUrl: pulumi.Output<string | undefined>;
    declare public readonly additionalScopes: pulumi.Output<string | undefined>;
    declare public readonly authenticationFlow: pulumi.Output<string | undefined>;
    /**
     * Allowed values: - `basic_auth` - `post_body` Defaults to `basic_auth`.
     */
    declare public readonly authorizationCodeAuthMethod: pulumi.Output<string | undefined>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    declare public readonly authorizationUrl: pulumi.Output<string | undefined>;
    /**
     * Generated.
     */
    declare public /*out*/ readonly callbackUri: pulumi.Output<string>;
    declare public readonly consumerKey: pulumi.Output<string>;
    declare public readonly consumerSecret: pulumi.Output<string>;
    /**
     * Defaults to `true`.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    declare public readonly enrollmentFlow: pulumi.Output<string | undefined>;
    /**
     * Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
     */
    declare public readonly groupMatchingMode: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    /**
     * Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to
     * pass objects. Generated.
     */
    declare public readonly oidcJwks: pulumi.Output<string>;
    /**
     * Automatically configure JWKS if not specified by `oidc_well_known_url`.
     */
    declare public readonly oidcJwksUrl: pulumi.Output<string | undefined>;
    /**
     * Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with
     * `.well-known/openid-configuration`.
     */
    declare public readonly oidcWellKnownUrl: pulumi.Output<string | undefined>;
    /**
     * Allowed values: - `all` - `any` Defaults to `any`.
     */
    declare public readonly policyEngineMode: pulumi.Output<string | undefined>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    declare public readonly profileUrl: pulumi.Output<string | undefined>;
    declare public readonly propertyMappings: pulumi.Output<string[] | undefined>;
    declare public readonly propertyMappingsGroups: pulumi.Output<string[] | undefined>;
    /**
     * Allowed values: - `apple` - `openidconnect` - `entraid` - `azuread` - `discord` - `facebook` - `github` - `gitlab` -
     * `google` - `mailcow` - `okta` - `patreon` - `reddit` - `twitch` - `twitter`
     */
    declare public readonly providerType: pulumi.Output<string>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    declare public readonly requestTokenUrl: pulumi.Output<string | undefined>;
    declare public readonly slug: pulumi.Output<string>;
    declare public readonly sourceOauthId: pulumi.Output<string>;
    /**
     * Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
     * `identifier`.
     */
    declare public readonly userMatchingMode: pulumi.Output<string | undefined>;
    /**
     * Defaults to `goauthentik.io/sources/%(slug)s`.
     */
    declare public readonly userPathTemplate: pulumi.Output<string | undefined>;
    /**
     * Generated.
     */
    declare public readonly uuid: pulumi.Output<string>;

    /**
     * Create a SourceOauth resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourceOauthArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourceOauthArgs | SourceOauthState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourceOauthState | undefined;
            resourceInputs["accessTokenUrl"] = state?.accessTokenUrl;
            resourceInputs["additionalScopes"] = state?.additionalScopes;
            resourceInputs["authenticationFlow"] = state?.authenticationFlow;
            resourceInputs["authorizationCodeAuthMethod"] = state?.authorizationCodeAuthMethod;
            resourceInputs["authorizationUrl"] = state?.authorizationUrl;
            resourceInputs["callbackUri"] = state?.callbackUri;
            resourceInputs["consumerKey"] = state?.consumerKey;
            resourceInputs["consumerSecret"] = state?.consumerSecret;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["enrollmentFlow"] = state?.enrollmentFlow;
            resourceInputs["groupMatchingMode"] = state?.groupMatchingMode;
            resourceInputs["name"] = state?.name;
            resourceInputs["oidcJwks"] = state?.oidcJwks;
            resourceInputs["oidcJwksUrl"] = state?.oidcJwksUrl;
            resourceInputs["oidcWellKnownUrl"] = state?.oidcWellKnownUrl;
            resourceInputs["policyEngineMode"] = state?.policyEngineMode;
            resourceInputs["profileUrl"] = state?.profileUrl;
            resourceInputs["propertyMappings"] = state?.propertyMappings;
            resourceInputs["propertyMappingsGroups"] = state?.propertyMappingsGroups;
            resourceInputs["providerType"] = state?.providerType;
            resourceInputs["requestTokenUrl"] = state?.requestTokenUrl;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["sourceOauthId"] = state?.sourceOauthId;
            resourceInputs["userMatchingMode"] = state?.userMatchingMode;
            resourceInputs["userPathTemplate"] = state?.userPathTemplate;
            resourceInputs["uuid"] = state?.uuid;
        } else {
            const args = argsOrState as SourceOauthArgs | undefined;
            if (args?.consumerKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'consumerKey'");
            }
            if (args?.consumerSecret === undefined && !opts.urn) {
                throw new Error("Missing required property 'consumerSecret'");
            }
            if (args?.providerType === undefined && !opts.urn) {
                throw new Error("Missing required property 'providerType'");
            }
            if (args?.slug === undefined && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            resourceInputs["accessTokenUrl"] = args?.accessTokenUrl;
            resourceInputs["additionalScopes"] = args?.additionalScopes;
            resourceInputs["authenticationFlow"] = args?.authenticationFlow;
            resourceInputs["authorizationCodeAuthMethod"] = args?.authorizationCodeAuthMethod;
            resourceInputs["authorizationUrl"] = args?.authorizationUrl;
            resourceInputs["consumerKey"] = args?.consumerKey;
            resourceInputs["consumerSecret"] = args?.consumerSecret ? pulumi.secret(args.consumerSecret) : undefined;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["enrollmentFlow"] = args?.enrollmentFlow;
            resourceInputs["groupMatchingMode"] = args?.groupMatchingMode;
            resourceInputs["name"] = args?.name;
            resourceInputs["oidcJwks"] = args?.oidcJwks;
            resourceInputs["oidcJwksUrl"] = args?.oidcJwksUrl;
            resourceInputs["oidcWellKnownUrl"] = args?.oidcWellKnownUrl;
            resourceInputs["policyEngineMode"] = args?.policyEngineMode;
            resourceInputs["profileUrl"] = args?.profileUrl;
            resourceInputs["propertyMappings"] = args?.propertyMappings;
            resourceInputs["propertyMappingsGroups"] = args?.propertyMappingsGroups;
            resourceInputs["providerType"] = args?.providerType;
            resourceInputs["requestTokenUrl"] = args?.requestTokenUrl;
            resourceInputs["slug"] = args?.slug;
            resourceInputs["sourceOauthId"] = args?.sourceOauthId;
            resourceInputs["userMatchingMode"] = args?.userMatchingMode;
            resourceInputs["userPathTemplate"] = args?.userPathTemplate;
            resourceInputs["uuid"] = args?.uuid;
            resourceInputs["callbackUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["consumerSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SourceOauth.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SourceOauth resources.
 */
export interface SourceOauthState {
    /**
     * Only required for OAuth1.
     */
    accessTokenUrl?: pulumi.Input<string>;
    additionalScopes?: pulumi.Input<string>;
    authenticationFlow?: pulumi.Input<string>;
    /**
     * Allowed values: - `basic_auth` - `post_body` Defaults to `basic_auth`.
     */
    authorizationCodeAuthMethod?: pulumi.Input<string>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    authorizationUrl?: pulumi.Input<string>;
    /**
     * Generated.
     */
    callbackUri?: pulumi.Input<string>;
    consumerKey?: pulumi.Input<string>;
    consumerSecret?: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    enrollmentFlow?: pulumi.Input<string>;
    /**
     * Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
     */
    groupMatchingMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to
     * pass objects. Generated.
     */
    oidcJwks?: pulumi.Input<string>;
    /**
     * Automatically configure JWKS if not specified by `oidc_well_known_url`.
     */
    oidcJwksUrl?: pulumi.Input<string>;
    /**
     * Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with
     * `.well-known/openid-configuration`.
     */
    oidcWellKnownUrl?: pulumi.Input<string>;
    /**
     * Allowed values: - `all` - `any` Defaults to `any`.
     */
    policyEngineMode?: pulumi.Input<string>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    profileUrl?: pulumi.Input<string>;
    propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
    propertyMappingsGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allowed values: - `apple` - `openidconnect` - `entraid` - `azuread` - `discord` - `facebook` - `github` - `gitlab` -
     * `google` - `mailcow` - `okta` - `patreon` - `reddit` - `twitch` - `twitter`
     */
    providerType?: pulumi.Input<string>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    requestTokenUrl?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    sourceOauthId?: pulumi.Input<string>;
    /**
     * Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
     * `identifier`.
     */
    userMatchingMode?: pulumi.Input<string>;
    /**
     * Defaults to `goauthentik.io/sources/%(slug)s`.
     */
    userPathTemplate?: pulumi.Input<string>;
    /**
     * Generated.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SourceOauth resource.
 */
export interface SourceOauthArgs {
    /**
     * Only required for OAuth1.
     */
    accessTokenUrl?: pulumi.Input<string>;
    additionalScopes?: pulumi.Input<string>;
    authenticationFlow?: pulumi.Input<string>;
    /**
     * Allowed values: - `basic_auth` - `post_body` Defaults to `basic_auth`.
     */
    authorizationCodeAuthMethod?: pulumi.Input<string>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    authorizationUrl?: pulumi.Input<string>;
    consumerKey: pulumi.Input<string>;
    consumerSecret: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    enrollmentFlow?: pulumi.Input<string>;
    /**
     * Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
     */
    groupMatchingMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to
     * pass objects. Generated.
     */
    oidcJwks?: pulumi.Input<string>;
    /**
     * Automatically configure JWKS if not specified by `oidc_well_known_url`.
     */
    oidcJwksUrl?: pulumi.Input<string>;
    /**
     * Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with
     * `.well-known/openid-configuration`.
     */
    oidcWellKnownUrl?: pulumi.Input<string>;
    /**
     * Allowed values: - `all` - `any` Defaults to `any`.
     */
    policyEngineMode?: pulumi.Input<string>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    profileUrl?: pulumi.Input<string>;
    propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
    propertyMappingsGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allowed values: - `apple` - `openidconnect` - `entraid` - `azuread` - `discord` - `facebook` - `github` - `gitlab` -
     * `google` - `mailcow` - `okta` - `patreon` - `reddit` - `twitch` - `twitter`
     */
    providerType: pulumi.Input<string>;
    /**
     * Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
     */
    requestTokenUrl?: pulumi.Input<string>;
    slug: pulumi.Input<string>;
    sourceOauthId?: pulumi.Input<string>;
    /**
     * Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
     * `identifier`.
     */
    userMatchingMode?: pulumi.Input<string>;
    /**
     * Defaults to `goauthentik.io/sources/%(slug)s`.
     */
    userPathTemplate?: pulumi.Input<string>;
    /**
     * Generated.
     */
    uuid?: pulumi.Input<string>;
}
