// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class EventRule extends pulumi.CustomResource {
    /**
     * Get an existing EventRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventRuleState, opts?: pulumi.CustomResourceOptions): EventRule {
        return new EventRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/eventRule:EventRule';

    /**
     * Returns true if the given object is an instance of EventRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventRule.__pulumiType;
    }

    declare public readonly eventRuleId: pulumi.Output<string>;
    declare public readonly group: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    /**
     * Allowed values: - `notice` - `warning` - `alert` Defaults to `warning`.
     */
    declare public readonly severity: pulumi.Output<string | undefined>;
    declare public readonly transports: pulumi.Output<string[]>;
    declare public readonly webhookMapping: pulumi.Output<string | undefined>;

    /**
     * Create a EventRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventRuleArgs | EventRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventRuleState | undefined;
            resourceInputs["eventRuleId"] = state?.eventRuleId;
            resourceInputs["group"] = state?.group;
            resourceInputs["name"] = state?.name;
            resourceInputs["severity"] = state?.severity;
            resourceInputs["transports"] = state?.transports;
            resourceInputs["webhookMapping"] = state?.webhookMapping;
        } else {
            const args = argsOrState as EventRuleArgs | undefined;
            if (args?.transports === undefined && !opts.urn) {
                throw new Error("Missing required property 'transports'");
            }
            resourceInputs["eventRuleId"] = args?.eventRuleId;
            resourceInputs["group"] = args?.group;
            resourceInputs["name"] = args?.name;
            resourceInputs["severity"] = args?.severity;
            resourceInputs["transports"] = args?.transports;
            resourceInputs["webhookMapping"] = args?.webhookMapping;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EventRule resources.
 */
export interface EventRuleState {
    eventRuleId?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Allowed values: - `notice` - `warning` - `alert` Defaults to `warning`.
     */
    severity?: pulumi.Input<string>;
    transports?: pulumi.Input<pulumi.Input<string>[]>;
    webhookMapping?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EventRule resource.
 */
export interface EventRuleArgs {
    eventRuleId?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Allowed values: - `notice` - `warning` - `alert` Defaults to `warning`.
     */
    severity?: pulumi.Input<string>;
    transports: pulumi.Input<pulumi.Input<string>[]>;
    webhookMapping?: pulumi.Input<string>;
}
