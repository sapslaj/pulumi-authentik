// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ProviderOauth2 extends pulumi.CustomResource {
    /**
     * Get an existing ProviderOauth2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProviderOauth2State, opts?: pulumi.CustomResourceOptions): ProviderOauth2 {
        return new ProviderOauth2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/providerOauth2:ProviderOauth2';

    /**
     * Returns true if the given object is an instance of ProviderOauth2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProviderOauth2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderOauth2.__pulumiType;
    }

    /**
     * Defaults to `minutes=1`.
     */
    declare public readonly accessCodeValidity: pulumi.Output<string | undefined>;
    /**
     * Defaults to `minutes=10`.
     */
    declare public readonly accessTokenValidity: pulumi.Output<string | undefined>;
    declare public readonly allowedRedirectUris: pulumi.Output<{[key: string]: string}[] | undefined>;
    declare public readonly authenticationFlow: pulumi.Output<string | undefined>;
    declare public readonly authorizationFlow: pulumi.Output<string>;
    declare public readonly clientId: pulumi.Output<string>;
    /**
     * Generated.
     */
    declare public readonly clientSecret: pulumi.Output<string>;
    /**
     * Allowed values: - `confidential` - `public` Defaults to `confidential`.
     */
    declare public readonly clientType: pulumi.Output<string | undefined>;
    declare public readonly encryptionKey: pulumi.Output<string | undefined>;
    /**
     * Defaults to `true`.
     */
    declare public readonly includeClaimsInIdToken: pulumi.Output<boolean | undefined>;
    declare public readonly invalidationFlow: pulumi.Output<string>;
    /**
     * Allowed values: - `global` - `per_provider` Defaults to `per_provider`.
     */
    declare public readonly issuerMode: pulumi.Output<string | undefined>;
    /**
     * Deprecated. Use `jwt_federation_sources` instead.
     */
    declare public readonly jwksSources: pulumi.Output<string[] | undefined>;
    /**
     * JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
     */
    declare public readonly jwtFederationProviders: pulumi.Output<number[] | undefined>;
    /**
     * JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
     */
    declare public readonly jwtFederationSources: pulumi.Output<string[] | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly propertyMappings: pulumi.Output<string[] | undefined>;
    declare public readonly providerOauth2Id: pulumi.Output<string>;
    /**
     * Defaults to `days=30`.
     */
    declare public readonly refreshTokenValidity: pulumi.Output<string | undefined>;
    declare public readonly signingKey: pulumi.Output<string | undefined>;
    /**
     * Allowed values: - `hashed_user_id` - `user_id` - `user_uuid` - `user_username` - `user_email` - `user_upn` Defaults to
     * `hashed_user_id`.
     */
    declare public readonly subMode: pulumi.Output<string | undefined>;

    /**
     * Create a ProviderOauth2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderOauth2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProviderOauth2Args | ProviderOauth2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProviderOauth2State | undefined;
            resourceInputs["accessCodeValidity"] = state?.accessCodeValidity;
            resourceInputs["accessTokenValidity"] = state?.accessTokenValidity;
            resourceInputs["allowedRedirectUris"] = state?.allowedRedirectUris;
            resourceInputs["authenticationFlow"] = state?.authenticationFlow;
            resourceInputs["authorizationFlow"] = state?.authorizationFlow;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["clientSecret"] = state?.clientSecret;
            resourceInputs["clientType"] = state?.clientType;
            resourceInputs["encryptionKey"] = state?.encryptionKey;
            resourceInputs["includeClaimsInIdToken"] = state?.includeClaimsInIdToken;
            resourceInputs["invalidationFlow"] = state?.invalidationFlow;
            resourceInputs["issuerMode"] = state?.issuerMode;
            resourceInputs["jwksSources"] = state?.jwksSources;
            resourceInputs["jwtFederationProviders"] = state?.jwtFederationProviders;
            resourceInputs["jwtFederationSources"] = state?.jwtFederationSources;
            resourceInputs["name"] = state?.name;
            resourceInputs["propertyMappings"] = state?.propertyMappings;
            resourceInputs["providerOauth2Id"] = state?.providerOauth2Id;
            resourceInputs["refreshTokenValidity"] = state?.refreshTokenValidity;
            resourceInputs["signingKey"] = state?.signingKey;
            resourceInputs["subMode"] = state?.subMode;
        } else {
            const args = argsOrState as ProviderOauth2Args | undefined;
            if (args?.authorizationFlow === undefined && !opts.urn) {
                throw new Error("Missing required property 'authorizationFlow'");
            }
            if (args?.clientId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if (args?.invalidationFlow === undefined && !opts.urn) {
                throw new Error("Missing required property 'invalidationFlow'");
            }
            resourceInputs["accessCodeValidity"] = args?.accessCodeValidity;
            resourceInputs["accessTokenValidity"] = args?.accessTokenValidity;
            resourceInputs["allowedRedirectUris"] = args?.allowedRedirectUris;
            resourceInputs["authenticationFlow"] = args?.authenticationFlow;
            resourceInputs["authorizationFlow"] = args?.authorizationFlow;
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["clientType"] = args?.clientType;
            resourceInputs["encryptionKey"] = args?.encryptionKey;
            resourceInputs["includeClaimsInIdToken"] = args?.includeClaimsInIdToken;
            resourceInputs["invalidationFlow"] = args?.invalidationFlow;
            resourceInputs["issuerMode"] = args?.issuerMode;
            resourceInputs["jwksSources"] = args?.jwksSources;
            resourceInputs["jwtFederationProviders"] = args?.jwtFederationProviders;
            resourceInputs["jwtFederationSources"] = args?.jwtFederationSources;
            resourceInputs["name"] = args?.name;
            resourceInputs["propertyMappings"] = args?.propertyMappings;
            resourceInputs["providerOauth2Id"] = args?.providerOauth2Id;
            resourceInputs["refreshTokenValidity"] = args?.refreshTokenValidity;
            resourceInputs["signingKey"] = args?.signingKey;
            resourceInputs["subMode"] = args?.subMode;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ProviderOauth2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProviderOauth2 resources.
 */
export interface ProviderOauth2State {
    /**
     * Defaults to `minutes=1`.
     */
    accessCodeValidity?: pulumi.Input<string>;
    /**
     * Defaults to `minutes=10`.
     */
    accessTokenValidity?: pulumi.Input<string>;
    allowedRedirectUris?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    authenticationFlow?: pulumi.Input<string>;
    authorizationFlow?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    /**
     * Generated.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Allowed values: - `confidential` - `public` Defaults to `confidential`.
     */
    clientType?: pulumi.Input<string>;
    encryptionKey?: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    includeClaimsInIdToken?: pulumi.Input<boolean>;
    invalidationFlow?: pulumi.Input<string>;
    /**
     * Allowed values: - `global` - `per_provider` Defaults to `per_provider`.
     */
    issuerMode?: pulumi.Input<string>;
    /**
     * Deprecated. Use `jwt_federation_sources` instead.
     */
    jwksSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
     */
    jwtFederationProviders?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
     */
    jwtFederationSources?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
    providerOauth2Id?: pulumi.Input<string>;
    /**
     * Defaults to `days=30`.
     */
    refreshTokenValidity?: pulumi.Input<string>;
    signingKey?: pulumi.Input<string>;
    /**
     * Allowed values: - `hashed_user_id` - `user_id` - `user_uuid` - `user_username` - `user_email` - `user_upn` Defaults to
     * `hashed_user_id`.
     */
    subMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProviderOauth2 resource.
 */
export interface ProviderOauth2Args {
    /**
     * Defaults to `minutes=1`.
     */
    accessCodeValidity?: pulumi.Input<string>;
    /**
     * Defaults to `minutes=10`.
     */
    accessTokenValidity?: pulumi.Input<string>;
    allowedRedirectUris?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    authenticationFlow?: pulumi.Input<string>;
    authorizationFlow: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    /**
     * Generated.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Allowed values: - `confidential` - `public` Defaults to `confidential`.
     */
    clientType?: pulumi.Input<string>;
    encryptionKey?: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    includeClaimsInIdToken?: pulumi.Input<boolean>;
    invalidationFlow: pulumi.Input<string>;
    /**
     * Allowed values: - `global` - `per_provider` Defaults to `per_provider`.
     */
    issuerMode?: pulumi.Input<string>;
    /**
     * Deprecated. Use `jwt_federation_sources` instead.
     */
    jwksSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
     */
    jwtFederationProviders?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
     */
    jwtFederationSources?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
    providerOauth2Id?: pulumi.Input<string>;
    /**
     * Defaults to `days=30`.
     */
    refreshTokenValidity?: pulumi.Input<string>;
    signingKey?: pulumi.Input<string>;
    /**
     * Allowed values: - `hashed_user_id` - `user_id` - `user_uuid` - `user_username` - `user_email` - `user_upn` Defaults to
     * `hashed_user_id`.
     */
    subMode?: pulumi.Input<string>;
}
