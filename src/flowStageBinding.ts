// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FlowStageBinding extends pulumi.CustomResource {
    /**
     * Get an existing FlowStageBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlowStageBindingState, opts?: pulumi.CustomResourceOptions): FlowStageBinding {
        return new FlowStageBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/flowStageBinding:FlowStageBinding';

    /**
     * Returns true if the given object is an instance of FlowStageBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlowStageBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlowStageBinding.__pulumiType;
    }

    /**
     * Evaluate policies during the Flow planning process. Defaults to <span pulumi-lang-nodejs="`true`" pulumi-lang-dotnet="`True`" pulumi-lang-go="`true`" pulumi-lang-python="`true`" pulumi-lang-yaml="`true`" pulumi-lang-java="`true`">`true`</span>.
     */
    declare public readonly evaluateOnPlan: pulumi.Output<boolean | undefined>;
    declare public readonly flowStageBindingId: pulumi.Output<string>;
    /**
     * Allowed values:
     *   - <span pulumi-lang-nodejs="`retry`" pulumi-lang-dotnet="`Retry`" pulumi-lang-go="`retry`" pulumi-lang-python="`retry`" pulumi-lang-yaml="`retry`" pulumi-lang-java="`retry`">`retry`</span>
     *   - <span pulumi-lang-nodejs="`restart`" pulumi-lang-dotnet="`Restart`" pulumi-lang-go="`restart`" pulumi-lang-python="`restart`" pulumi-lang-yaml="`restart`" pulumi-lang-java="`restart`">`restart`</span>
     *   - <span pulumi-lang-nodejs="`restartWithContext`" pulumi-lang-dotnet="`RestartWithContext`" pulumi-lang-go="`restartWithContext`" pulumi-lang-python="`restart_with_context`" pulumi-lang-yaml="`restartWithContext`" pulumi-lang-java="`restartWithContext`">`restart_with_context`</span>
     *  Defaults to <span pulumi-lang-nodejs="`retry`" pulumi-lang-dotnet="`Retry`" pulumi-lang-go="`retry`" pulumi-lang-python="`retry`" pulumi-lang-yaml="`retry`" pulumi-lang-java="`retry`">`retry`</span>.
     */
    declare public readonly invalidResponseAction: pulumi.Output<string | undefined>;
    declare public readonly order: pulumi.Output<number>;
    /**
     * Allowed values:
     *   - <span pulumi-lang-nodejs="`all`" pulumi-lang-dotnet="`All`" pulumi-lang-go="`all`" pulumi-lang-python="`all`" pulumi-lang-yaml="`all`" pulumi-lang-java="`all`">`all`</span>
     *   - <span pulumi-lang-nodejs="`any`" pulumi-lang-dotnet="`Any`" pulumi-lang-go="`any`" pulumi-lang-python="`any`" pulumi-lang-yaml="`any`" pulumi-lang-java="`any`">`any`</span>
     *  Defaults to <span pulumi-lang-nodejs="`any`" pulumi-lang-dotnet="`Any`" pulumi-lang-go="`any`" pulumi-lang-python="`any`" pulumi-lang-yaml="`any`" pulumi-lang-java="`any`">`any`</span>.
     */
    declare public readonly policyEngineMode: pulumi.Output<string | undefined>;
    /**
     * Evaluate policies when the Stage is present to the user. Defaults to <span pulumi-lang-nodejs="`false`" pulumi-lang-dotnet="`False`" pulumi-lang-go="`false`" pulumi-lang-python="`false`" pulumi-lang-yaml="`false`" pulumi-lang-java="`false`">`false`</span>.
     */
    declare public readonly reEvaluatePolicies: pulumi.Output<boolean | undefined>;
    declare public readonly stage: pulumi.Output<string>;
    declare public readonly target: pulumi.Output<string>;

    /**
     * Create a FlowStageBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlowStageBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlowStageBindingArgs | FlowStageBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlowStageBindingState | undefined;
            resourceInputs["evaluateOnPlan"] = state?.evaluateOnPlan;
            resourceInputs["flowStageBindingId"] = state?.flowStageBindingId;
            resourceInputs["invalidResponseAction"] = state?.invalidResponseAction;
            resourceInputs["order"] = state?.order;
            resourceInputs["policyEngineMode"] = state?.policyEngineMode;
            resourceInputs["reEvaluatePolicies"] = state?.reEvaluatePolicies;
            resourceInputs["stage"] = state?.stage;
            resourceInputs["target"] = state?.target;
        } else {
            const args = argsOrState as FlowStageBindingArgs | undefined;
            if (args?.order === undefined && !opts.urn) {
                throw new Error("Missing required property 'order'");
            }
            if (args?.stage === undefined && !opts.urn) {
                throw new Error("Missing required property 'stage'");
            }
            if (args?.target === undefined && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["evaluateOnPlan"] = args?.evaluateOnPlan;
            resourceInputs["flowStageBindingId"] = args?.flowStageBindingId;
            resourceInputs["invalidResponseAction"] = args?.invalidResponseAction;
            resourceInputs["order"] = args?.order;
            resourceInputs["policyEngineMode"] = args?.policyEngineMode;
            resourceInputs["reEvaluatePolicies"] = args?.reEvaluatePolicies;
            resourceInputs["stage"] = args?.stage;
            resourceInputs["target"] = args?.target;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlowStageBinding.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FlowStageBinding resources.
 */
export interface FlowStageBindingState {
    /**
     * Evaluate policies during the Flow planning process. Defaults to <span pulumi-lang-nodejs="`true`" pulumi-lang-dotnet="`True`" pulumi-lang-go="`true`" pulumi-lang-python="`true`" pulumi-lang-yaml="`true`" pulumi-lang-java="`true`">`true`</span>.
     */
    evaluateOnPlan?: pulumi.Input<boolean>;
    flowStageBindingId?: pulumi.Input<string>;
    /**
     * Allowed values:
     *   - <span pulumi-lang-nodejs="`retry`" pulumi-lang-dotnet="`Retry`" pulumi-lang-go="`retry`" pulumi-lang-python="`retry`" pulumi-lang-yaml="`retry`" pulumi-lang-java="`retry`">`retry`</span>
     *   - <span pulumi-lang-nodejs="`restart`" pulumi-lang-dotnet="`Restart`" pulumi-lang-go="`restart`" pulumi-lang-python="`restart`" pulumi-lang-yaml="`restart`" pulumi-lang-java="`restart`">`restart`</span>
     *   - <span pulumi-lang-nodejs="`restartWithContext`" pulumi-lang-dotnet="`RestartWithContext`" pulumi-lang-go="`restartWithContext`" pulumi-lang-python="`restart_with_context`" pulumi-lang-yaml="`restartWithContext`" pulumi-lang-java="`restartWithContext`">`restart_with_context`</span>
     *  Defaults to <span pulumi-lang-nodejs="`retry`" pulumi-lang-dotnet="`Retry`" pulumi-lang-go="`retry`" pulumi-lang-python="`retry`" pulumi-lang-yaml="`retry`" pulumi-lang-java="`retry`">`retry`</span>.
     */
    invalidResponseAction?: pulumi.Input<string>;
    order?: pulumi.Input<number>;
    /**
     * Allowed values:
     *   - <span pulumi-lang-nodejs="`all`" pulumi-lang-dotnet="`All`" pulumi-lang-go="`all`" pulumi-lang-python="`all`" pulumi-lang-yaml="`all`" pulumi-lang-java="`all`">`all`</span>
     *   - <span pulumi-lang-nodejs="`any`" pulumi-lang-dotnet="`Any`" pulumi-lang-go="`any`" pulumi-lang-python="`any`" pulumi-lang-yaml="`any`" pulumi-lang-java="`any`">`any`</span>
     *  Defaults to <span pulumi-lang-nodejs="`any`" pulumi-lang-dotnet="`Any`" pulumi-lang-go="`any`" pulumi-lang-python="`any`" pulumi-lang-yaml="`any`" pulumi-lang-java="`any`">`any`</span>.
     */
    policyEngineMode?: pulumi.Input<string>;
    /**
     * Evaluate policies when the Stage is present to the user. Defaults to <span pulumi-lang-nodejs="`false`" pulumi-lang-dotnet="`False`" pulumi-lang-go="`false`" pulumi-lang-python="`false`" pulumi-lang-yaml="`false`" pulumi-lang-java="`false`">`false`</span>.
     */
    reEvaluatePolicies?: pulumi.Input<boolean>;
    stage?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FlowStageBinding resource.
 */
export interface FlowStageBindingArgs {
    /**
     * Evaluate policies during the Flow planning process. Defaults to <span pulumi-lang-nodejs="`true`" pulumi-lang-dotnet="`True`" pulumi-lang-go="`true`" pulumi-lang-python="`true`" pulumi-lang-yaml="`true`" pulumi-lang-java="`true`">`true`</span>.
     */
    evaluateOnPlan?: pulumi.Input<boolean>;
    flowStageBindingId?: pulumi.Input<string>;
    /**
     * Allowed values:
     *   - <span pulumi-lang-nodejs="`retry`" pulumi-lang-dotnet="`Retry`" pulumi-lang-go="`retry`" pulumi-lang-python="`retry`" pulumi-lang-yaml="`retry`" pulumi-lang-java="`retry`">`retry`</span>
     *   - <span pulumi-lang-nodejs="`restart`" pulumi-lang-dotnet="`Restart`" pulumi-lang-go="`restart`" pulumi-lang-python="`restart`" pulumi-lang-yaml="`restart`" pulumi-lang-java="`restart`">`restart`</span>
     *   - <span pulumi-lang-nodejs="`restartWithContext`" pulumi-lang-dotnet="`RestartWithContext`" pulumi-lang-go="`restartWithContext`" pulumi-lang-python="`restart_with_context`" pulumi-lang-yaml="`restartWithContext`" pulumi-lang-java="`restartWithContext`">`restart_with_context`</span>
     *  Defaults to <span pulumi-lang-nodejs="`retry`" pulumi-lang-dotnet="`Retry`" pulumi-lang-go="`retry`" pulumi-lang-python="`retry`" pulumi-lang-yaml="`retry`" pulumi-lang-java="`retry`">`retry`</span>.
     */
    invalidResponseAction?: pulumi.Input<string>;
    order: pulumi.Input<number>;
    /**
     * Allowed values:
     *   - <span pulumi-lang-nodejs="`all`" pulumi-lang-dotnet="`All`" pulumi-lang-go="`all`" pulumi-lang-python="`all`" pulumi-lang-yaml="`all`" pulumi-lang-java="`all`">`all`</span>
     *   - <span pulumi-lang-nodejs="`any`" pulumi-lang-dotnet="`Any`" pulumi-lang-go="`any`" pulumi-lang-python="`any`" pulumi-lang-yaml="`any`" pulumi-lang-java="`any`">`any`</span>
     *  Defaults to <span pulumi-lang-nodejs="`any`" pulumi-lang-dotnet="`Any`" pulumi-lang-go="`any`" pulumi-lang-python="`any`" pulumi-lang-yaml="`any`" pulumi-lang-java="`any`">`any`</span>.
     */
    policyEngineMode?: pulumi.Input<string>;
    /**
     * Evaluate policies when the Stage is present to the user. Defaults to <span pulumi-lang-nodejs="`false`" pulumi-lang-dotnet="`False`" pulumi-lang-go="`false`" pulumi-lang-python="`false`" pulumi-lang-yaml="`false`" pulumi-lang-java="`false`">`false`</span>.
     */
    reEvaluatePolicies?: pulumi.Input<boolean>;
    stage: pulumi.Input<string>;
    target: pulumi.Input<string>;
}
