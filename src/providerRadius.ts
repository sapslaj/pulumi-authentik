// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ProviderRadius extends pulumi.CustomResource {
    /**
     * Get an existing ProviderRadius resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProviderRadiusState, opts?: pulumi.CustomResourceOptions): ProviderRadius {
        return new ProviderRadius(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/providerRadius:ProviderRadius';

    /**
     * Returns true if the given object is an instance of ProviderRadius.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProviderRadius {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderRadius.__pulumiType;
    }

    declare public readonly authorizationFlow: pulumi.Output<string>;
    /**
     * Defaults to `0.0.0.0/0, ::/0`.
     */
    declare public readonly clientNetworks: pulumi.Output<string | undefined>;
    declare public readonly invalidationFlow: pulumi.Output<string>;
    /**
     * Defaults to `true`.
     */
    declare public readonly mfaSupport: pulumi.Output<boolean | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly propertyMappings: pulumi.Output<string[] | undefined>;
    declare public readonly providerRadiusId: pulumi.Output<string>;
    declare public readonly sharedSecret: pulumi.Output<string>;

    /**
     * Create a ProviderRadius resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderRadiusArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProviderRadiusArgs | ProviderRadiusState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProviderRadiusState | undefined;
            resourceInputs["authorizationFlow"] = state?.authorizationFlow;
            resourceInputs["clientNetworks"] = state?.clientNetworks;
            resourceInputs["invalidationFlow"] = state?.invalidationFlow;
            resourceInputs["mfaSupport"] = state?.mfaSupport;
            resourceInputs["name"] = state?.name;
            resourceInputs["propertyMappings"] = state?.propertyMappings;
            resourceInputs["providerRadiusId"] = state?.providerRadiusId;
            resourceInputs["sharedSecret"] = state?.sharedSecret;
        } else {
            const args = argsOrState as ProviderRadiusArgs | undefined;
            if (args?.authorizationFlow === undefined && !opts.urn) {
                throw new Error("Missing required property 'authorizationFlow'");
            }
            if (args?.invalidationFlow === undefined && !opts.urn) {
                throw new Error("Missing required property 'invalidationFlow'");
            }
            if (args?.sharedSecret === undefined && !opts.urn) {
                throw new Error("Missing required property 'sharedSecret'");
            }
            resourceInputs["authorizationFlow"] = args?.authorizationFlow;
            resourceInputs["clientNetworks"] = args?.clientNetworks;
            resourceInputs["invalidationFlow"] = args?.invalidationFlow;
            resourceInputs["mfaSupport"] = args?.mfaSupport;
            resourceInputs["name"] = args?.name;
            resourceInputs["propertyMappings"] = args?.propertyMappings;
            resourceInputs["providerRadiusId"] = args?.providerRadiusId;
            resourceInputs["sharedSecret"] = args?.sharedSecret ? pulumi.secret(args.sharedSecret) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sharedSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ProviderRadius.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProviderRadius resources.
 */
export interface ProviderRadiusState {
    authorizationFlow?: pulumi.Input<string>;
    /**
     * Defaults to `0.0.0.0/0, ::/0`.
     */
    clientNetworks?: pulumi.Input<string>;
    invalidationFlow?: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    mfaSupport?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
    providerRadiusId?: pulumi.Input<string>;
    sharedSecret?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProviderRadius resource.
 */
export interface ProviderRadiusArgs {
    authorizationFlow: pulumi.Input<string>;
    /**
     * Defaults to `0.0.0.0/0, ::/0`.
     */
    clientNetworks?: pulumi.Input<string>;
    invalidationFlow: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    mfaSupport?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
    providerRadiusId?: pulumi.Input<string>;
    sharedSecret: pulumi.Input<string>;
}
