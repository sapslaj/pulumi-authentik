// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class EnterpriseLicense extends pulumi.CustomResource {
    /**
     * Get an existing EnterpriseLicense resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnterpriseLicenseState, opts?: pulumi.CustomResourceOptions): EnterpriseLicense {
        return new EnterpriseLicense(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/enterpriseLicense:EnterpriseLicense';

    /**
     * Returns true if the given object is an instance of EnterpriseLicense.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EnterpriseLicense {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnterpriseLicense.__pulumiType;
    }

    declare public readonly enterpriseLicenseId: pulumi.Output<string>;
    /**
     * Generated.
     */
    declare public /*out*/ readonly expiry: pulumi.Output<number>;
    /**
     * Generated.
     */
    declare public /*out*/ readonly externalUsers: pulumi.Output<number>;
    /**
     * Generated.
     */
    declare public /*out*/ readonly internalUsers: pulumi.Output<number>;
    declare public readonly key: pulumi.Output<string>;
    /**
     * Generated.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;

    /**
     * Create a EnterpriseLicense resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnterpriseLicenseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnterpriseLicenseArgs | EnterpriseLicenseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnterpriseLicenseState | undefined;
            resourceInputs["enterpriseLicenseId"] = state?.enterpriseLicenseId;
            resourceInputs["expiry"] = state?.expiry;
            resourceInputs["externalUsers"] = state?.externalUsers;
            resourceInputs["internalUsers"] = state?.internalUsers;
            resourceInputs["key"] = state?.key;
            resourceInputs["name"] = state?.name;
        } else {
            const args = argsOrState as EnterpriseLicenseArgs | undefined;
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["enterpriseLicenseId"] = args?.enterpriseLicenseId;
            resourceInputs["key"] = args?.key ? pulumi.secret(args.key) : undefined;
            resourceInputs["expiry"] = undefined /*out*/;
            resourceInputs["externalUsers"] = undefined /*out*/;
            resourceInputs["internalUsers"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["key"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EnterpriseLicense.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EnterpriseLicense resources.
 */
export interface EnterpriseLicenseState {
    enterpriseLicenseId?: pulumi.Input<string>;
    /**
     * Generated.
     */
    expiry?: pulumi.Input<number>;
    /**
     * Generated.
     */
    externalUsers?: pulumi.Input<number>;
    /**
     * Generated.
     */
    internalUsers?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
    /**
     * Generated.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EnterpriseLicense resource.
 */
export interface EnterpriseLicenseArgs {
    enterpriseLicenseId?: pulumi.Input<string>;
    key: pulumi.Input<string>;
}
