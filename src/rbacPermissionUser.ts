// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RbacPermissionUser extends pulumi.CustomResource {
    /**
     * Get an existing RbacPermissionUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RbacPermissionUserState, opts?: pulumi.CustomResourceOptions): RbacPermissionUser {
        return new RbacPermissionUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/rbacPermissionUser:RbacPermissionUser';

    /**
     * Returns true if the given object is an instance of RbacPermissionUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RbacPermissionUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RbacPermissionUser.__pulumiType;
    }

    /**
     * Allowed values: - `authentik_tenants.domain` - `authentik_crypto.certificatekeypair` - `authentik_flows.flow` -
     * `authentik_flows.flowstagebinding` - `authentik_outposts.dockerserviceconnection` -
     * `authentik_outposts.kubernetesserviceconnection` - `authentik_outposts.outpost` - `authentik_policies_dummy.dummypolicy`
     * - `authentik_policies_event_matcher.eventmatcherpolicy` - `authentik_policies_expiry.passwordexpirypolicy` -
     * `authentik_policies_expression.expressionpolicy` - `authentik_policies_geoip.geoippolicy` -
     * `authentik_policies_password.passwordpolicy` - `authentik_policies_reputation.reputationpolicy` -
     * `authentik_policies.policybinding` - `authentik_providers_ldap.ldapprovider` - `authentik_providers_oauth2.scopemapping`
     * - `authentik_providers_oauth2.oauth2provider` - `authentik_providers_proxy.proxyprovider` -
     * `authentik_providers_rac.racprovider` - `authentik_providers_rac.endpoint` -
     * `authentik_providers_rac.racpropertymapping` - `authentik_providers_radius.radiusprovider` -
     * `authentik_providers_radius.radiusproviderpropertymapping` - `authentik_providers_saml.samlprovider` -
     * `authentik_providers_saml.samlpropertymapping` - `authentik_providers_scim.scimprovider` -
     * `authentik_providers_scim.scimmapping` - `authentik_rbac.role` - `authentik_rbac.initialpermissions` -
     * `authentik_sources_kerberos.kerberossource` - `authentik_sources_kerberos.kerberossourcepropertymapping` -
     * `authentik_sources_kerberos.userkerberossourceconnection` - `authentik_sources_kerberos.groupkerberossourceconnection` -
     * `authentik_sources_ldap.ldapsource` - `authentik_sources_ldap.ldapsourcepropertymapping` -
     * `authentik_sources_ldap.userldapsourceconnection` - `authentik_sources_ldap.groupldapsourceconnection` -
     * `authentik_sources_oauth.oauthsource` - `authentik_sources_oauth.oauthsourcepropertymapping` -
     * `authentik_sources_oauth.useroauthsourceconnection` - `authentik_sources_oauth.groupoauthsourceconnection` -
     * `authentik_sources_plex.plexsource` - `authentik_sources_plex.plexsourcepropertymapping` -
     * `authentik_sources_plex.userplexsourceconnection` - `authentik_sources_plex.groupplexsourceconnection` -
     * `authentik_sources_saml.samlsource` - `authentik_sources_saml.samlsourcepropertymapping` -
     * `authentik_sources_saml.usersamlsourceconnection` - `authentik_sources_saml.groupsamlsourceconnection` -
     * `authentik_sources_scim.scimsource` - `authentik_sources_scim.scimsourcepropertymapping` -
     * `authentik_stages_authenticator_duo.authenticatorduostage` - `authentik_stages_authenticator_duo.duodevice` -
     * `authentik_stages_authenticator_email.authenticatoremailstage` - `authentik_stages_authenticator_email.emaildevice` -
     * `authentik_stages_authenticator_sms.authenticatorsmsstage` - `authentik_stages_authenticator_sms.smsdevice` -
     * `authentik_stages_authenticator_static.authenticatorstaticstage` - `authentik_stages_authenticator_static.staticdevice`
     * - `authentik_stages_authenticator_totp.authenticatortotpstage` - `authentik_stages_authenticator_totp.totpdevice` -
     * `authentik_stages_authenticator_validate.authenticatorvalidatestage` -
     * `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage` -
     * `authentik_stages_authenticator_webauthn.webauthndevice` - `authentik_stages_captcha.captchastage` -
     * `authentik_stages_consent.consentstage` - `authentik_stages_consent.userconsent` - `authentik_stages_deny.denystage` -
     * `authentik_stages_dummy.dummystage` - `authentik_stages_email.emailstage` -
     * `authentik_stages_identification.identificationstage` - `authentik_stages_invitation.invitationstage` -
     * `authentik_stages_invitation.invitation` - `authentik_stages_password.passwordstage` - `authentik_stages_prompt.prompt`
     * - `authentik_stages_prompt.promptstage` - `authentik_stages_redirect.redirectstage` -
     * `authentik_stages_user_delete.userdeletestage` - `authentik_stages_user_login.userloginstage` -
     * `authentik_stages_user_logout.userlogoutstage` - `authentik_stages_user_write.userwritestage` - `authentik_brands.brand`
     * - `authentik_blueprints.blueprintinstance` - `authentik_core.group` - `authentik_core.user` -
     * `authentik_core.application` - `authentik_core.applicationentitlement` - `authentik_core.token` -
     * `authentik_enterprise.license` - `authentik_policies_unique_password.uniquepasswordpolicy` -
     * `authentik_providers_google_workspace.googleworkspaceprovider` -
     * `authentik_providers_google_workspace.googleworkspaceprovidermapping` -
     * `authentik_providers_microsoft_entra.microsoftentraprovider` -
     * `authentik_providers_microsoft_entra.microsoftentraprovidermapping` - `authentik_providers_ssf.ssfprovider` -
     * `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage` - `authentik_stages_mtls.mutualtlsstage` -
     * `authentik_stages_source.sourcestage` - `authentik_events.event` - `authentik_events.notificationtransport` -
     * `authentik_events.notification` - `authentik_events.notificationrule` - `authentik_events.notificationwebhookmapping`
     */
    declare public readonly model: pulumi.Output<string | undefined>;
    declare public readonly objectId: pulumi.Output<string | undefined>;
    declare public readonly permission: pulumi.Output<string>;
    declare public readonly rbacPermissionUserId: pulumi.Output<string>;
    declare public readonly user: pulumi.Output<number>;

    /**
     * Create a RbacPermissionUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RbacPermissionUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RbacPermissionUserArgs | RbacPermissionUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RbacPermissionUserState | undefined;
            resourceInputs["model"] = state?.model;
            resourceInputs["objectId"] = state?.objectId;
            resourceInputs["permission"] = state?.permission;
            resourceInputs["rbacPermissionUserId"] = state?.rbacPermissionUserId;
            resourceInputs["user"] = state?.user;
        } else {
            const args = argsOrState as RbacPermissionUserArgs | undefined;
            if (args?.permission === undefined && !opts.urn) {
                throw new Error("Missing required property 'permission'");
            }
            if (args?.user === undefined && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["model"] = args?.model;
            resourceInputs["objectId"] = args?.objectId;
            resourceInputs["permission"] = args?.permission;
            resourceInputs["rbacPermissionUserId"] = args?.rbacPermissionUserId;
            resourceInputs["user"] = args?.user;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RbacPermissionUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RbacPermissionUser resources.
 */
export interface RbacPermissionUserState {
    /**
     * Allowed values: - `authentik_tenants.domain` - `authentik_crypto.certificatekeypair` - `authentik_flows.flow` -
     * `authentik_flows.flowstagebinding` - `authentik_outposts.dockerserviceconnection` -
     * `authentik_outposts.kubernetesserviceconnection` - `authentik_outposts.outpost` - `authentik_policies_dummy.dummypolicy`
     * - `authentik_policies_event_matcher.eventmatcherpolicy` - `authentik_policies_expiry.passwordexpirypolicy` -
     * `authentik_policies_expression.expressionpolicy` - `authentik_policies_geoip.geoippolicy` -
     * `authentik_policies_password.passwordpolicy` - `authentik_policies_reputation.reputationpolicy` -
     * `authentik_policies.policybinding` - `authentik_providers_ldap.ldapprovider` - `authentik_providers_oauth2.scopemapping`
     * - `authentik_providers_oauth2.oauth2provider` - `authentik_providers_proxy.proxyprovider` -
     * `authentik_providers_rac.racprovider` - `authentik_providers_rac.endpoint` -
     * `authentik_providers_rac.racpropertymapping` - `authentik_providers_radius.radiusprovider` -
     * `authentik_providers_radius.radiusproviderpropertymapping` - `authentik_providers_saml.samlprovider` -
     * `authentik_providers_saml.samlpropertymapping` - `authentik_providers_scim.scimprovider` -
     * `authentik_providers_scim.scimmapping` - `authentik_rbac.role` - `authentik_rbac.initialpermissions` -
     * `authentik_sources_kerberos.kerberossource` - `authentik_sources_kerberos.kerberossourcepropertymapping` -
     * `authentik_sources_kerberos.userkerberossourceconnection` - `authentik_sources_kerberos.groupkerberossourceconnection` -
     * `authentik_sources_ldap.ldapsource` - `authentik_sources_ldap.ldapsourcepropertymapping` -
     * `authentik_sources_ldap.userldapsourceconnection` - `authentik_sources_ldap.groupldapsourceconnection` -
     * `authentik_sources_oauth.oauthsource` - `authentik_sources_oauth.oauthsourcepropertymapping` -
     * `authentik_sources_oauth.useroauthsourceconnection` - `authentik_sources_oauth.groupoauthsourceconnection` -
     * `authentik_sources_plex.plexsource` - `authentik_sources_plex.plexsourcepropertymapping` -
     * `authentik_sources_plex.userplexsourceconnection` - `authentik_sources_plex.groupplexsourceconnection` -
     * `authentik_sources_saml.samlsource` - `authentik_sources_saml.samlsourcepropertymapping` -
     * `authentik_sources_saml.usersamlsourceconnection` - `authentik_sources_saml.groupsamlsourceconnection` -
     * `authentik_sources_scim.scimsource` - `authentik_sources_scim.scimsourcepropertymapping` -
     * `authentik_stages_authenticator_duo.authenticatorduostage` - `authentik_stages_authenticator_duo.duodevice` -
     * `authentik_stages_authenticator_email.authenticatoremailstage` - `authentik_stages_authenticator_email.emaildevice` -
     * `authentik_stages_authenticator_sms.authenticatorsmsstage` - `authentik_stages_authenticator_sms.smsdevice` -
     * `authentik_stages_authenticator_static.authenticatorstaticstage` - `authentik_stages_authenticator_static.staticdevice`
     * - `authentik_stages_authenticator_totp.authenticatortotpstage` - `authentik_stages_authenticator_totp.totpdevice` -
     * `authentik_stages_authenticator_validate.authenticatorvalidatestage` -
     * `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage` -
     * `authentik_stages_authenticator_webauthn.webauthndevice` - `authentik_stages_captcha.captchastage` -
     * `authentik_stages_consent.consentstage` - `authentik_stages_consent.userconsent` - `authentik_stages_deny.denystage` -
     * `authentik_stages_dummy.dummystage` - `authentik_stages_email.emailstage` -
     * `authentik_stages_identification.identificationstage` - `authentik_stages_invitation.invitationstage` -
     * `authentik_stages_invitation.invitation` - `authentik_stages_password.passwordstage` - `authentik_stages_prompt.prompt`
     * - `authentik_stages_prompt.promptstage` - `authentik_stages_redirect.redirectstage` -
     * `authentik_stages_user_delete.userdeletestage` - `authentik_stages_user_login.userloginstage` -
     * `authentik_stages_user_logout.userlogoutstage` - `authentik_stages_user_write.userwritestage` - `authentik_brands.brand`
     * - `authentik_blueprints.blueprintinstance` - `authentik_core.group` - `authentik_core.user` -
     * `authentik_core.application` - `authentik_core.applicationentitlement` - `authentik_core.token` -
     * `authentik_enterprise.license` - `authentik_policies_unique_password.uniquepasswordpolicy` -
     * `authentik_providers_google_workspace.googleworkspaceprovider` -
     * `authentik_providers_google_workspace.googleworkspaceprovidermapping` -
     * `authentik_providers_microsoft_entra.microsoftentraprovider` -
     * `authentik_providers_microsoft_entra.microsoftentraprovidermapping` - `authentik_providers_ssf.ssfprovider` -
     * `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage` - `authentik_stages_mtls.mutualtlsstage` -
     * `authentik_stages_source.sourcestage` - `authentik_events.event` - `authentik_events.notificationtransport` -
     * `authentik_events.notification` - `authentik_events.notificationrule` - `authentik_events.notificationwebhookmapping`
     */
    model?: pulumi.Input<string>;
    objectId?: pulumi.Input<string>;
    permission?: pulumi.Input<string>;
    rbacPermissionUserId?: pulumi.Input<string>;
    user?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a RbacPermissionUser resource.
 */
export interface RbacPermissionUserArgs {
    /**
     * Allowed values: - `authentik_tenants.domain` - `authentik_crypto.certificatekeypair` - `authentik_flows.flow` -
     * `authentik_flows.flowstagebinding` - `authentik_outposts.dockerserviceconnection` -
     * `authentik_outposts.kubernetesserviceconnection` - `authentik_outposts.outpost` - `authentik_policies_dummy.dummypolicy`
     * - `authentik_policies_event_matcher.eventmatcherpolicy` - `authentik_policies_expiry.passwordexpirypolicy` -
     * `authentik_policies_expression.expressionpolicy` - `authentik_policies_geoip.geoippolicy` -
     * `authentik_policies_password.passwordpolicy` - `authentik_policies_reputation.reputationpolicy` -
     * `authentik_policies.policybinding` - `authentik_providers_ldap.ldapprovider` - `authentik_providers_oauth2.scopemapping`
     * - `authentik_providers_oauth2.oauth2provider` - `authentik_providers_proxy.proxyprovider` -
     * `authentik_providers_rac.racprovider` - `authentik_providers_rac.endpoint` -
     * `authentik_providers_rac.racpropertymapping` - `authentik_providers_radius.radiusprovider` -
     * `authentik_providers_radius.radiusproviderpropertymapping` - `authentik_providers_saml.samlprovider` -
     * `authentik_providers_saml.samlpropertymapping` - `authentik_providers_scim.scimprovider` -
     * `authentik_providers_scim.scimmapping` - `authentik_rbac.role` - `authentik_rbac.initialpermissions` -
     * `authentik_sources_kerberos.kerberossource` - `authentik_sources_kerberos.kerberossourcepropertymapping` -
     * `authentik_sources_kerberos.userkerberossourceconnection` - `authentik_sources_kerberos.groupkerberossourceconnection` -
     * `authentik_sources_ldap.ldapsource` - `authentik_sources_ldap.ldapsourcepropertymapping` -
     * `authentik_sources_ldap.userldapsourceconnection` - `authentik_sources_ldap.groupldapsourceconnection` -
     * `authentik_sources_oauth.oauthsource` - `authentik_sources_oauth.oauthsourcepropertymapping` -
     * `authentik_sources_oauth.useroauthsourceconnection` - `authentik_sources_oauth.groupoauthsourceconnection` -
     * `authentik_sources_plex.plexsource` - `authentik_sources_plex.plexsourcepropertymapping` -
     * `authentik_sources_plex.userplexsourceconnection` - `authentik_sources_plex.groupplexsourceconnection` -
     * `authentik_sources_saml.samlsource` - `authentik_sources_saml.samlsourcepropertymapping` -
     * `authentik_sources_saml.usersamlsourceconnection` - `authentik_sources_saml.groupsamlsourceconnection` -
     * `authentik_sources_scim.scimsource` - `authentik_sources_scim.scimsourcepropertymapping` -
     * `authentik_stages_authenticator_duo.authenticatorduostage` - `authentik_stages_authenticator_duo.duodevice` -
     * `authentik_stages_authenticator_email.authenticatoremailstage` - `authentik_stages_authenticator_email.emaildevice` -
     * `authentik_stages_authenticator_sms.authenticatorsmsstage` - `authentik_stages_authenticator_sms.smsdevice` -
     * `authentik_stages_authenticator_static.authenticatorstaticstage` - `authentik_stages_authenticator_static.staticdevice`
     * - `authentik_stages_authenticator_totp.authenticatortotpstage` - `authentik_stages_authenticator_totp.totpdevice` -
     * `authentik_stages_authenticator_validate.authenticatorvalidatestage` -
     * `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage` -
     * `authentik_stages_authenticator_webauthn.webauthndevice` - `authentik_stages_captcha.captchastage` -
     * `authentik_stages_consent.consentstage` - `authentik_stages_consent.userconsent` - `authentik_stages_deny.denystage` -
     * `authentik_stages_dummy.dummystage` - `authentik_stages_email.emailstage` -
     * `authentik_stages_identification.identificationstage` - `authentik_stages_invitation.invitationstage` -
     * `authentik_stages_invitation.invitation` - `authentik_stages_password.passwordstage` - `authentik_stages_prompt.prompt`
     * - `authentik_stages_prompt.promptstage` - `authentik_stages_redirect.redirectstage` -
     * `authentik_stages_user_delete.userdeletestage` - `authentik_stages_user_login.userloginstage` -
     * `authentik_stages_user_logout.userlogoutstage` - `authentik_stages_user_write.userwritestage` - `authentik_brands.brand`
     * - `authentik_blueprints.blueprintinstance` - `authentik_core.group` - `authentik_core.user` -
     * `authentik_core.application` - `authentik_core.applicationentitlement` - `authentik_core.token` -
     * `authentik_enterprise.license` - `authentik_policies_unique_password.uniquepasswordpolicy` -
     * `authentik_providers_google_workspace.googleworkspaceprovider` -
     * `authentik_providers_google_workspace.googleworkspaceprovidermapping` -
     * `authentik_providers_microsoft_entra.microsoftentraprovider` -
     * `authentik_providers_microsoft_entra.microsoftentraprovidermapping` - `authentik_providers_ssf.ssfprovider` -
     * `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage` - `authentik_stages_mtls.mutualtlsstage` -
     * `authentik_stages_source.sourcestage` - `authentik_events.event` - `authentik_events.notificationtransport` -
     * `authentik_events.notification` - `authentik_events.notificationrule` - `authentik_events.notificationwebhookmapping`
     */
    model?: pulumi.Input<string>;
    objectId?: pulumi.Input<string>;
    permission: pulumi.Input<string>;
    rbacPermissionUserId?: pulumi.Input<string>;
    user: pulumi.Input<number>;
}
