// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ProviderProxy extends pulumi.CustomResource {
    /**
     * Get an existing ProviderProxy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProviderProxyState, opts?: pulumi.CustomResourceOptions): ProviderProxy {
        return new ProviderProxy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/providerProxy:ProviderProxy';

    /**
     * Returns true if the given object is an instance of ProviderProxy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProviderProxy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderProxy.__pulumiType;
    }

    /**
     * Format: hours=1;minutes=2;seconds=3. Defaults to `minutes=10`.
     */
    declare public readonly accessTokenValidity: pulumi.Output<string | undefined>;
    declare public readonly authenticationFlow: pulumi.Output<string | undefined>;
    declare public readonly authorizationFlow: pulumi.Output<string>;
    /**
     * Defaults to `false`.
     */
    declare public readonly basicAuthEnabled: pulumi.Output<boolean | undefined>;
    declare public readonly basicAuthPasswordAttribute: pulumi.Output<string | undefined>;
    declare public readonly basicAuthUsernameAttribute: pulumi.Output<string | undefined>;
    /**
     * Generated.
     */
    declare public /*out*/ readonly clientId: pulumi.Output<string>;
    declare public readonly cookieDomain: pulumi.Output<string | undefined>;
    declare public readonly externalHost: pulumi.Output<string>;
    /**
     * Defaults to `true`.
     */
    declare public readonly interceptHeaderAuth: pulumi.Output<boolean | undefined>;
    declare public readonly internalHost: pulumi.Output<string | undefined>;
    /**
     * Defaults to `true`.
     */
    declare public readonly internalHostSslValidation: pulumi.Output<boolean | undefined>;
    declare public readonly invalidationFlow: pulumi.Output<string>;
    /**
     * Deprecated. Use `jwt_federation_sources` instead.
     */
    declare public readonly jwksSources: pulumi.Output<string[] | undefined>;
    /**
     * JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
     */
    declare public readonly jwtFederationProviders: pulumi.Output<number[] | undefined>;
    /**
     * JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
     */
    declare public readonly jwtFederationSources: pulumi.Output<string[] | undefined>;
    /**
     * Allowed values: - `proxy` - `forward_single` - `forward_domain` Defaults to `proxy`.
     */
    declare public readonly mode: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly propertyMappings: pulumi.Output<string[] | undefined>;
    declare public readonly providerProxyId: pulumi.Output<string>;
    /**
     * Format: hours=1;minutes=2;seconds=3. Defaults to `days=30`.
     */
    declare public readonly refreshTokenValidity: pulumi.Output<string | undefined>;
    declare public readonly skipPathRegex: pulumi.Output<string | undefined>;

    /**
     * Create a ProviderProxy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderProxyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProviderProxyArgs | ProviderProxyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProviderProxyState | undefined;
            resourceInputs["accessTokenValidity"] = state?.accessTokenValidity;
            resourceInputs["authenticationFlow"] = state?.authenticationFlow;
            resourceInputs["authorizationFlow"] = state?.authorizationFlow;
            resourceInputs["basicAuthEnabled"] = state?.basicAuthEnabled;
            resourceInputs["basicAuthPasswordAttribute"] = state?.basicAuthPasswordAttribute;
            resourceInputs["basicAuthUsernameAttribute"] = state?.basicAuthUsernameAttribute;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["cookieDomain"] = state?.cookieDomain;
            resourceInputs["externalHost"] = state?.externalHost;
            resourceInputs["interceptHeaderAuth"] = state?.interceptHeaderAuth;
            resourceInputs["internalHost"] = state?.internalHost;
            resourceInputs["internalHostSslValidation"] = state?.internalHostSslValidation;
            resourceInputs["invalidationFlow"] = state?.invalidationFlow;
            resourceInputs["jwksSources"] = state?.jwksSources;
            resourceInputs["jwtFederationProviders"] = state?.jwtFederationProviders;
            resourceInputs["jwtFederationSources"] = state?.jwtFederationSources;
            resourceInputs["mode"] = state?.mode;
            resourceInputs["name"] = state?.name;
            resourceInputs["propertyMappings"] = state?.propertyMappings;
            resourceInputs["providerProxyId"] = state?.providerProxyId;
            resourceInputs["refreshTokenValidity"] = state?.refreshTokenValidity;
            resourceInputs["skipPathRegex"] = state?.skipPathRegex;
        } else {
            const args = argsOrState as ProviderProxyArgs | undefined;
            if (args?.authorizationFlow === undefined && !opts.urn) {
                throw new Error("Missing required property 'authorizationFlow'");
            }
            if (args?.externalHost === undefined && !opts.urn) {
                throw new Error("Missing required property 'externalHost'");
            }
            if (args?.invalidationFlow === undefined && !opts.urn) {
                throw new Error("Missing required property 'invalidationFlow'");
            }
            resourceInputs["accessTokenValidity"] = args?.accessTokenValidity;
            resourceInputs["authenticationFlow"] = args?.authenticationFlow;
            resourceInputs["authorizationFlow"] = args?.authorizationFlow;
            resourceInputs["basicAuthEnabled"] = args?.basicAuthEnabled;
            resourceInputs["basicAuthPasswordAttribute"] = args?.basicAuthPasswordAttribute;
            resourceInputs["basicAuthUsernameAttribute"] = args?.basicAuthUsernameAttribute;
            resourceInputs["cookieDomain"] = args?.cookieDomain;
            resourceInputs["externalHost"] = args?.externalHost;
            resourceInputs["interceptHeaderAuth"] = args?.interceptHeaderAuth;
            resourceInputs["internalHost"] = args?.internalHost;
            resourceInputs["internalHostSslValidation"] = args?.internalHostSslValidation;
            resourceInputs["invalidationFlow"] = args?.invalidationFlow;
            resourceInputs["jwksSources"] = args?.jwksSources;
            resourceInputs["jwtFederationProviders"] = args?.jwtFederationProviders;
            resourceInputs["jwtFederationSources"] = args?.jwtFederationSources;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["name"] = args?.name;
            resourceInputs["propertyMappings"] = args?.propertyMappings;
            resourceInputs["providerProxyId"] = args?.providerProxyId;
            resourceInputs["refreshTokenValidity"] = args?.refreshTokenValidity;
            resourceInputs["skipPathRegex"] = args?.skipPathRegex;
            resourceInputs["clientId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProviderProxy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProviderProxy resources.
 */
export interface ProviderProxyState {
    /**
     * Format: hours=1;minutes=2;seconds=3. Defaults to `minutes=10`.
     */
    accessTokenValidity?: pulumi.Input<string>;
    authenticationFlow?: pulumi.Input<string>;
    authorizationFlow?: pulumi.Input<string>;
    /**
     * Defaults to `false`.
     */
    basicAuthEnabled?: pulumi.Input<boolean>;
    basicAuthPasswordAttribute?: pulumi.Input<string>;
    basicAuthUsernameAttribute?: pulumi.Input<string>;
    /**
     * Generated.
     */
    clientId?: pulumi.Input<string>;
    cookieDomain?: pulumi.Input<string>;
    externalHost?: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    interceptHeaderAuth?: pulumi.Input<boolean>;
    internalHost?: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    internalHostSslValidation?: pulumi.Input<boolean>;
    invalidationFlow?: pulumi.Input<string>;
    /**
     * Deprecated. Use `jwt_federation_sources` instead.
     */
    jwksSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
     */
    jwtFederationProviders?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
     */
    jwtFederationSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allowed values: - `proxy` - `forward_single` - `forward_domain` Defaults to `proxy`.
     */
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
    providerProxyId?: pulumi.Input<string>;
    /**
     * Format: hours=1;minutes=2;seconds=3. Defaults to `days=30`.
     */
    refreshTokenValidity?: pulumi.Input<string>;
    skipPathRegex?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProviderProxy resource.
 */
export interface ProviderProxyArgs {
    /**
     * Format: hours=1;minutes=2;seconds=3. Defaults to `minutes=10`.
     */
    accessTokenValidity?: pulumi.Input<string>;
    authenticationFlow?: pulumi.Input<string>;
    authorizationFlow: pulumi.Input<string>;
    /**
     * Defaults to `false`.
     */
    basicAuthEnabled?: pulumi.Input<boolean>;
    basicAuthPasswordAttribute?: pulumi.Input<string>;
    basicAuthUsernameAttribute?: pulumi.Input<string>;
    cookieDomain?: pulumi.Input<string>;
    externalHost: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    interceptHeaderAuth?: pulumi.Input<boolean>;
    internalHost?: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    internalHostSslValidation?: pulumi.Input<boolean>;
    invalidationFlow: pulumi.Input<string>;
    /**
     * Deprecated. Use `jwt_federation_sources` instead.
     */
    jwksSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
     */
    jwtFederationProviders?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
     */
    jwtFederationSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allowed values: - `proxy` - `forward_single` - `forward_domain` Defaults to `proxy`.
     */
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
    providerProxyId?: pulumi.Input<string>;
    /**
     * Format: hours=1;minutes=2;seconds=3. Defaults to `days=30`.
     */
    refreshTokenValidity?: pulumi.Input<string>;
    skipPathRegex?: pulumi.Input<string>;
}
