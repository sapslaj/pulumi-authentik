// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ProviderRac extends pulumi.CustomResource {
    /**
     * Get an existing ProviderRac resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProviderRacState, opts?: pulumi.CustomResourceOptions): ProviderRac {
        return new ProviderRac(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/providerRac:ProviderRac';

    /**
     * Returns true if the given object is an instance of ProviderRac.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProviderRac {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderRac.__pulumiType;
    }

    declare public readonly authenticationFlow: pulumi.Output<string | undefined>;
    declare public readonly authorizationFlow: pulumi.Output<string>;
    /**
     * Format: hours=1;minutes=2;seconds=3. Defaults to `seconds=0`.
     */
    declare public readonly connectionExpiry: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly propertyMappings: pulumi.Output<string[] | undefined>;
    declare public readonly providerRacId: pulumi.Output<string>;
    /**
     * JSON format expected. Use `jsonencode()` to pass objects. Defaults to `{}`.
     */
    declare public readonly settings: pulumi.Output<string | undefined>;

    /**
     * Create a ProviderRac resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderRacArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProviderRacArgs | ProviderRacState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProviderRacState | undefined;
            resourceInputs["authenticationFlow"] = state?.authenticationFlow;
            resourceInputs["authorizationFlow"] = state?.authorizationFlow;
            resourceInputs["connectionExpiry"] = state?.connectionExpiry;
            resourceInputs["name"] = state?.name;
            resourceInputs["propertyMappings"] = state?.propertyMappings;
            resourceInputs["providerRacId"] = state?.providerRacId;
            resourceInputs["settings"] = state?.settings;
        } else {
            const args = argsOrState as ProviderRacArgs | undefined;
            if (args?.authorizationFlow === undefined && !opts.urn) {
                throw new Error("Missing required property 'authorizationFlow'");
            }
            resourceInputs["authenticationFlow"] = args?.authenticationFlow;
            resourceInputs["authorizationFlow"] = args?.authorizationFlow;
            resourceInputs["connectionExpiry"] = args?.connectionExpiry;
            resourceInputs["name"] = args?.name;
            resourceInputs["propertyMappings"] = args?.propertyMappings;
            resourceInputs["providerRacId"] = args?.providerRacId;
            resourceInputs["settings"] = args?.settings;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProviderRac.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProviderRac resources.
 */
export interface ProviderRacState {
    authenticationFlow?: pulumi.Input<string>;
    authorizationFlow?: pulumi.Input<string>;
    /**
     * Format: hours=1;minutes=2;seconds=3. Defaults to `seconds=0`.
     */
    connectionExpiry?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
    providerRacId?: pulumi.Input<string>;
    /**
     * JSON format expected. Use `jsonencode()` to pass objects. Defaults to `{}`.
     */
    settings?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProviderRac resource.
 */
export interface ProviderRacArgs {
    authenticationFlow?: pulumi.Input<string>;
    authorizationFlow: pulumi.Input<string>;
    /**
     * Format: hours=1;minutes=2;seconds=3. Defaults to `seconds=0`.
     */
    connectionExpiry?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
    providerRacId?: pulumi.Input<string>;
    /**
     * JSON format expected. Use `jsonencode()` to pass objects. Defaults to `{}`.
     */
    settings?: pulumi.Input<string>;
}
