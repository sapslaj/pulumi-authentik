// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SourcePlex extends pulumi.CustomResource {
    /**
     * Get an existing SourcePlex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourcePlexState, opts?: pulumi.CustomResourceOptions): SourcePlex {
        return new SourcePlex(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/sourcePlex:SourcePlex';

    /**
     * Returns true if the given object is an instance of SourcePlex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SourcePlex {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourcePlex.__pulumiType;
    }

    /**
     * Defaults to `true`.
     */
    declare public readonly allowFriends: pulumi.Output<boolean | undefined>;
    declare public readonly allowedServers: pulumi.Output<string[] | undefined>;
    declare public readonly authenticationFlow: pulumi.Output<string | undefined>;
    declare public readonly clientId: pulumi.Output<string>;
    /**
     * Defaults to `true`.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    declare public readonly enrollmentFlow: pulumi.Output<string | undefined>;
    /**
     * Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
     */
    declare public readonly groupMatchingMode: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly plexToken: pulumi.Output<string>;
    /**
     * Allowed values: - `all` - `any` Defaults to `any`.
     */
    declare public readonly policyEngineMode: pulumi.Output<string | undefined>;
    declare public readonly slug: pulumi.Output<string>;
    declare public readonly sourcePlexId: pulumi.Output<string>;
    /**
     * Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
     * `identifier`.
     */
    declare public readonly userMatchingMode: pulumi.Output<string | undefined>;
    /**
     * Defaults to `goauthentik.io/sources/%(slug)s`.
     */
    declare public readonly userPathTemplate: pulumi.Output<string | undefined>;
    /**
     * Generated.
     */
    declare public readonly uuid: pulumi.Output<string>;

    /**
     * Create a SourcePlex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourcePlexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourcePlexArgs | SourcePlexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourcePlexState | undefined;
            resourceInputs["allowFriends"] = state?.allowFriends;
            resourceInputs["allowedServers"] = state?.allowedServers;
            resourceInputs["authenticationFlow"] = state?.authenticationFlow;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["enrollmentFlow"] = state?.enrollmentFlow;
            resourceInputs["groupMatchingMode"] = state?.groupMatchingMode;
            resourceInputs["name"] = state?.name;
            resourceInputs["plexToken"] = state?.plexToken;
            resourceInputs["policyEngineMode"] = state?.policyEngineMode;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["sourcePlexId"] = state?.sourcePlexId;
            resourceInputs["userMatchingMode"] = state?.userMatchingMode;
            resourceInputs["userPathTemplate"] = state?.userPathTemplate;
            resourceInputs["uuid"] = state?.uuid;
        } else {
            const args = argsOrState as SourcePlexArgs | undefined;
            if (args?.clientId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if (args?.plexToken === undefined && !opts.urn) {
                throw new Error("Missing required property 'plexToken'");
            }
            if (args?.slug === undefined && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            resourceInputs["allowFriends"] = args?.allowFriends;
            resourceInputs["allowedServers"] = args?.allowedServers;
            resourceInputs["authenticationFlow"] = args?.authenticationFlow;
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["enrollmentFlow"] = args?.enrollmentFlow;
            resourceInputs["groupMatchingMode"] = args?.groupMatchingMode;
            resourceInputs["name"] = args?.name;
            resourceInputs["plexToken"] = args?.plexToken ? pulumi.secret(args.plexToken) : undefined;
            resourceInputs["policyEngineMode"] = args?.policyEngineMode;
            resourceInputs["slug"] = args?.slug;
            resourceInputs["sourcePlexId"] = args?.sourcePlexId;
            resourceInputs["userMatchingMode"] = args?.userMatchingMode;
            resourceInputs["userPathTemplate"] = args?.userPathTemplate;
            resourceInputs["uuid"] = args?.uuid;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["plexToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SourcePlex.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SourcePlex resources.
 */
export interface SourcePlexState {
    /**
     * Defaults to `true`.
     */
    allowFriends?: pulumi.Input<boolean>;
    allowedServers?: pulumi.Input<pulumi.Input<string>[]>;
    authenticationFlow?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    enrollmentFlow?: pulumi.Input<string>;
    /**
     * Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
     */
    groupMatchingMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    plexToken?: pulumi.Input<string>;
    /**
     * Allowed values: - `all` - `any` Defaults to `any`.
     */
    policyEngineMode?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    sourcePlexId?: pulumi.Input<string>;
    /**
     * Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
     * `identifier`.
     */
    userMatchingMode?: pulumi.Input<string>;
    /**
     * Defaults to `goauthentik.io/sources/%(slug)s`.
     */
    userPathTemplate?: pulumi.Input<string>;
    /**
     * Generated.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SourcePlex resource.
 */
export interface SourcePlexArgs {
    /**
     * Defaults to `true`.
     */
    allowFriends?: pulumi.Input<boolean>;
    allowedServers?: pulumi.Input<pulumi.Input<string>[]>;
    authenticationFlow?: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    enrollmentFlow?: pulumi.Input<string>;
    /**
     * Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
     */
    groupMatchingMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    plexToken: pulumi.Input<string>;
    /**
     * Allowed values: - `all` - `any` Defaults to `any`.
     */
    policyEngineMode?: pulumi.Input<string>;
    slug: pulumi.Input<string>;
    sourcePlexId?: pulumi.Input<string>;
    /**
     * Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
     * `identifier`.
     */
    userMatchingMode?: pulumi.Input<string>;
    /**
     * Defaults to `goauthentik.io/sources/%(slug)s`.
     */
    userPathTemplate?: pulumi.Input<string>;
    /**
     * Generated.
     */
    uuid?: pulumi.Input<string>;
}
