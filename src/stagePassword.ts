// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StagePassword extends pulumi.CustomResource {
    /**
     * Get an existing StagePassword resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StagePasswordState, opts?: pulumi.CustomResourceOptions): StagePassword {
        return new StagePassword(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/stagePassword:StagePassword';

    /**
     * Returns true if the given object is an instance of StagePassword.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StagePassword {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StagePassword.__pulumiType;
    }

    /**
     * Defaults to `false`.
     */
    declare public readonly allowShowPassword: pulumi.Output<boolean | undefined>;
    declare public readonly backends: pulumi.Output<string[]>;
    declare public readonly configureFlow: pulumi.Output<string | undefined>;
    /**
     * Defaults to `5`.
     */
    declare public readonly failedAttemptsBeforeCancel: pulumi.Output<number | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly stagePasswordId: pulumi.Output<string>;

    /**
     * Create a StagePassword resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StagePasswordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StagePasswordArgs | StagePasswordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StagePasswordState | undefined;
            resourceInputs["allowShowPassword"] = state?.allowShowPassword;
            resourceInputs["backends"] = state?.backends;
            resourceInputs["configureFlow"] = state?.configureFlow;
            resourceInputs["failedAttemptsBeforeCancel"] = state?.failedAttemptsBeforeCancel;
            resourceInputs["name"] = state?.name;
            resourceInputs["stagePasswordId"] = state?.stagePasswordId;
        } else {
            const args = argsOrState as StagePasswordArgs | undefined;
            if (args?.backends === undefined && !opts.urn) {
                throw new Error("Missing required property 'backends'");
            }
            resourceInputs["allowShowPassword"] = args?.allowShowPassword;
            resourceInputs["backends"] = args?.backends;
            resourceInputs["configureFlow"] = args?.configureFlow;
            resourceInputs["failedAttemptsBeforeCancel"] = args?.failedAttemptsBeforeCancel;
            resourceInputs["name"] = args?.name;
            resourceInputs["stagePasswordId"] = args?.stagePasswordId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StagePassword.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StagePassword resources.
 */
export interface StagePasswordState {
    /**
     * Defaults to `false`.
     */
    allowShowPassword?: pulumi.Input<boolean>;
    backends?: pulumi.Input<pulumi.Input<string>[]>;
    configureFlow?: pulumi.Input<string>;
    /**
     * Defaults to `5`.
     */
    failedAttemptsBeforeCancel?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    stagePasswordId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StagePassword resource.
 */
export interface StagePasswordArgs {
    /**
     * Defaults to `false`.
     */
    allowShowPassword?: pulumi.Input<boolean>;
    backends: pulumi.Input<pulumi.Input<string>[]>;
    configureFlow?: pulumi.Input<string>;
    /**
     * Defaults to `5`.
     */
    failedAttemptsBeforeCancel?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    stagePasswordId?: pulumi.Input<string>;
}
