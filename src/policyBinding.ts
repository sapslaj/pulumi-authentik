// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PolicyBinding extends pulumi.CustomResource {
    /**
     * Get an existing PolicyBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyBindingState, opts?: pulumi.CustomResourceOptions): PolicyBinding {
        return new PolicyBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/policyBinding:PolicyBinding';

    /**
     * Returns true if the given object is an instance of PolicyBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyBinding.__pulumiType;
    }

    /**
     * Defaults to `true`.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * Defaults to `false`.
     */
    declare public readonly failureResult: pulumi.Output<boolean | undefined>;
    /**
     * UUID of the group
     */
    declare public readonly group: pulumi.Output<string | undefined>;
    /**
     * Defaults to `false`.
     */
    declare public readonly negate: pulumi.Output<boolean | undefined>;
    declare public readonly order: pulumi.Output<number>;
    /**
     * UUID of the policy
     */
    declare public readonly policy: pulumi.Output<string | undefined>;
    declare public readonly policyBindingId: pulumi.Output<string>;
    /**
     * ID of the object this binding should apply to
     */
    declare public readonly target: pulumi.Output<string>;
    /**
     * Defaults to `30`.
     */
    declare public readonly timeout: pulumi.Output<number | undefined>;
    /**
     * PK of the user
     */
    declare public readonly user: pulumi.Output<number | undefined>;

    /**
     * Create a PolicyBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyBindingArgs | PolicyBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyBindingState | undefined;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["failureResult"] = state?.failureResult;
            resourceInputs["group"] = state?.group;
            resourceInputs["negate"] = state?.negate;
            resourceInputs["order"] = state?.order;
            resourceInputs["policy"] = state?.policy;
            resourceInputs["policyBindingId"] = state?.policyBindingId;
            resourceInputs["target"] = state?.target;
            resourceInputs["timeout"] = state?.timeout;
            resourceInputs["user"] = state?.user;
        } else {
            const args = argsOrState as PolicyBindingArgs | undefined;
            if (args?.order === undefined && !opts.urn) {
                throw new Error("Missing required property 'order'");
            }
            if (args?.target === undefined && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["failureResult"] = args?.failureResult;
            resourceInputs["group"] = args?.group;
            resourceInputs["negate"] = args?.negate;
            resourceInputs["order"] = args?.order;
            resourceInputs["policy"] = args?.policy;
            resourceInputs["policyBindingId"] = args?.policyBindingId;
            resourceInputs["target"] = args?.target;
            resourceInputs["timeout"] = args?.timeout;
            resourceInputs["user"] = args?.user;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyBinding.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicyBinding resources.
 */
export interface PolicyBindingState {
    /**
     * Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Defaults to `false`.
     */
    failureResult?: pulumi.Input<boolean>;
    /**
     * UUID of the group
     */
    group?: pulumi.Input<string>;
    /**
     * Defaults to `false`.
     */
    negate?: pulumi.Input<boolean>;
    order?: pulumi.Input<number>;
    /**
     * UUID of the policy
     */
    policy?: pulumi.Input<string>;
    policyBindingId?: pulumi.Input<string>;
    /**
     * ID of the object this binding should apply to
     */
    target?: pulumi.Input<string>;
    /**
     * Defaults to `30`.
     */
    timeout?: pulumi.Input<number>;
    /**
     * PK of the user
     */
    user?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a PolicyBinding resource.
 */
export interface PolicyBindingArgs {
    /**
     * Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Defaults to `false`.
     */
    failureResult?: pulumi.Input<boolean>;
    /**
     * UUID of the group
     */
    group?: pulumi.Input<string>;
    /**
     * Defaults to `false`.
     */
    negate?: pulumi.Input<boolean>;
    order: pulumi.Input<number>;
    /**
     * UUID of the policy
     */
    policy?: pulumi.Input<string>;
    policyBindingId?: pulumi.Input<string>;
    /**
     * ID of the object this binding should apply to
     */
    target: pulumi.Input<string>;
    /**
     * Defaults to `30`.
     */
    timeout?: pulumi.Input<number>;
    /**
     * PK of the user
     */
    user?: pulumi.Input<number>;
}
