// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ProviderScim extends pulumi.CustomResource {
    /**
     * Get an existing ProviderScim resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProviderScimState, opts?: pulumi.CustomResourceOptions): ProviderScim {
        return new ProviderScim(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/providerScim:ProviderScim';

    /**
     * Returns true if the given object is an instance of ProviderScim.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProviderScim {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderScim.__pulumiType;
    }

    /**
     * Allowed values: - `default` - `aws` - `slack` Defaults to `default`.
     */
    declare public readonly compatibilityMode: pulumi.Output<string | undefined>;
    /**
     * Defaults to `false`.
     */
    declare public readonly dryRun: pulumi.Output<boolean | undefined>;
    declare public readonly excludeUsersServiceAccount: pulumi.Output<boolean | undefined>;
    declare public readonly filterGroup: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly propertyMappings: pulumi.Output<string[] | undefined>;
    declare public readonly propertyMappingsGroups: pulumi.Output<string[] | undefined>;
    declare public readonly providerScimId: pulumi.Output<string>;
    declare public readonly token: pulumi.Output<string>;
    declare public readonly url: pulumi.Output<string>;

    /**
     * Create a ProviderScim resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderScimArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProviderScimArgs | ProviderScimState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProviderScimState | undefined;
            resourceInputs["compatibilityMode"] = state?.compatibilityMode;
            resourceInputs["dryRun"] = state?.dryRun;
            resourceInputs["excludeUsersServiceAccount"] = state?.excludeUsersServiceAccount;
            resourceInputs["filterGroup"] = state?.filterGroup;
            resourceInputs["name"] = state?.name;
            resourceInputs["propertyMappings"] = state?.propertyMappings;
            resourceInputs["propertyMappingsGroups"] = state?.propertyMappingsGroups;
            resourceInputs["providerScimId"] = state?.providerScimId;
            resourceInputs["token"] = state?.token;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as ProviderScimArgs | undefined;
            if (args?.token === undefined && !opts.urn) {
                throw new Error("Missing required property 'token'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["compatibilityMode"] = args?.compatibilityMode;
            resourceInputs["dryRun"] = args?.dryRun;
            resourceInputs["excludeUsersServiceAccount"] = args?.excludeUsersServiceAccount;
            resourceInputs["filterGroup"] = args?.filterGroup;
            resourceInputs["name"] = args?.name;
            resourceInputs["propertyMappings"] = args?.propertyMappings;
            resourceInputs["propertyMappingsGroups"] = args?.propertyMappingsGroups;
            resourceInputs["providerScimId"] = args?.providerScimId;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
            resourceInputs["url"] = args?.url;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ProviderScim.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProviderScim resources.
 */
export interface ProviderScimState {
    /**
     * Allowed values: - `default` - `aws` - `slack` Defaults to `default`.
     */
    compatibilityMode?: pulumi.Input<string>;
    /**
     * Defaults to `false`.
     */
    dryRun?: pulumi.Input<boolean>;
    excludeUsersServiceAccount?: pulumi.Input<boolean>;
    filterGroup?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
    propertyMappingsGroups?: pulumi.Input<pulumi.Input<string>[]>;
    providerScimId?: pulumi.Input<string>;
    token?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProviderScim resource.
 */
export interface ProviderScimArgs {
    /**
     * Allowed values: - `default` - `aws` - `slack` Defaults to `default`.
     */
    compatibilityMode?: pulumi.Input<string>;
    /**
     * Defaults to `false`.
     */
    dryRun?: pulumi.Input<boolean>;
    excludeUsersServiceAccount?: pulumi.Input<boolean>;
    filterGroup?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
    propertyMappingsGroups?: pulumi.Input<pulumi.Input<string>[]>;
    providerScimId?: pulumi.Input<string>;
    token: pulumi.Input<string>;
    url: pulumi.Input<string>;
}
