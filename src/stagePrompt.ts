// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StagePrompt extends pulumi.CustomResource {
    /**
     * Get an existing StagePrompt resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StagePromptState, opts?: pulumi.CustomResourceOptions): StagePrompt {
        return new StagePrompt(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/stagePrompt:StagePrompt';

    /**
     * Returns true if the given object is an instance of StagePrompt.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StagePrompt {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StagePrompt.__pulumiType;
    }

    declare public readonly fields: pulumi.Output<string[]>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly stagePromptId: pulumi.Output<string>;
    declare public readonly validationPolicies: pulumi.Output<string[] | undefined>;

    /**
     * Create a StagePrompt resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StagePromptArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StagePromptArgs | StagePromptState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StagePromptState | undefined;
            resourceInputs["fields"] = state?.fields;
            resourceInputs["name"] = state?.name;
            resourceInputs["stagePromptId"] = state?.stagePromptId;
            resourceInputs["validationPolicies"] = state?.validationPolicies;
        } else {
            const args = argsOrState as StagePromptArgs | undefined;
            if (args?.fields === undefined && !opts.urn) {
                throw new Error("Missing required property 'fields'");
            }
            resourceInputs["fields"] = args?.fields;
            resourceInputs["name"] = args?.name;
            resourceInputs["stagePromptId"] = args?.stagePromptId;
            resourceInputs["validationPolicies"] = args?.validationPolicies;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StagePrompt.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StagePrompt resources.
 */
export interface StagePromptState {
    fields?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    stagePromptId?: pulumi.Input<string>;
    validationPolicies?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a StagePrompt resource.
 */
export interface StagePromptArgs {
    fields: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    stagePromptId?: pulumi.Input<string>;
    validationPolicies?: pulumi.Input<pulumi.Input<string>[]>;
}
