// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PolicyPassword extends pulumi.CustomResource {
    /**
     * Get an existing PolicyPassword resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyPasswordState, opts?: pulumi.CustomResourceOptions): PolicyPassword {
        return new PolicyPassword(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/policyPassword:PolicyPassword';

    /**
     * Returns true if the given object is an instance of PolicyPassword.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyPassword {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyPassword.__pulumiType;
    }

    declare public readonly amountDigits: pulumi.Output<number | undefined>;
    declare public readonly amountLowercase: pulumi.Output<number | undefined>;
    declare public readonly amountSymbols: pulumi.Output<number | undefined>;
    declare public readonly amountUppercase: pulumi.Output<number | undefined>;
    /**
     * Defaults to `false`.
     */
    declare public readonly checkHaveIBeenPwned: pulumi.Output<boolean | undefined>;
    /**
     * Defaults to `true`.
     */
    declare public readonly checkStaticRules: pulumi.Output<boolean | undefined>;
    /**
     * Defaults to `false`.
     */
    declare public readonly checkZxcvbn: pulumi.Output<boolean | undefined>;
    declare public readonly errorMessage: pulumi.Output<string>;
    /**
     * Defaults to `false`.
     */
    declare public readonly executionLogging: pulumi.Output<boolean | undefined>;
    /**
     * Defaults to `1`.
     */
    declare public readonly hibpAllowedCount: pulumi.Output<number | undefined>;
    declare public readonly lengthMin: pulumi.Output<number | undefined>;
    declare public readonly name: pulumi.Output<string>;
    /**
     * Defaults to `password`.
     */
    declare public readonly passwordField: pulumi.Output<string | undefined>;
    declare public readonly policyPasswordId: pulumi.Output<string>;
    /**
     * Defaults to `!\"#$%&'()*+,-./:;<=>?@[\]^_`{|}~`.
     */
    declare public readonly symbolCharset: pulumi.Output<string | undefined>;
    /**
     * Defaults to `2`.
     */
    declare public readonly zxcvbnScoreThreshold: pulumi.Output<number | undefined>;

    /**
     * Create a PolicyPassword resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyPasswordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyPasswordArgs | PolicyPasswordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyPasswordState | undefined;
            resourceInputs["amountDigits"] = state?.amountDigits;
            resourceInputs["amountLowercase"] = state?.amountLowercase;
            resourceInputs["amountSymbols"] = state?.amountSymbols;
            resourceInputs["amountUppercase"] = state?.amountUppercase;
            resourceInputs["checkHaveIBeenPwned"] = state?.checkHaveIBeenPwned;
            resourceInputs["checkStaticRules"] = state?.checkStaticRules;
            resourceInputs["checkZxcvbn"] = state?.checkZxcvbn;
            resourceInputs["errorMessage"] = state?.errorMessage;
            resourceInputs["executionLogging"] = state?.executionLogging;
            resourceInputs["hibpAllowedCount"] = state?.hibpAllowedCount;
            resourceInputs["lengthMin"] = state?.lengthMin;
            resourceInputs["name"] = state?.name;
            resourceInputs["passwordField"] = state?.passwordField;
            resourceInputs["policyPasswordId"] = state?.policyPasswordId;
            resourceInputs["symbolCharset"] = state?.symbolCharset;
            resourceInputs["zxcvbnScoreThreshold"] = state?.zxcvbnScoreThreshold;
        } else {
            const args = argsOrState as PolicyPasswordArgs | undefined;
            if (args?.errorMessage === undefined && !opts.urn) {
                throw new Error("Missing required property 'errorMessage'");
            }
            resourceInputs["amountDigits"] = args?.amountDigits;
            resourceInputs["amountLowercase"] = args?.amountLowercase;
            resourceInputs["amountSymbols"] = args?.amountSymbols;
            resourceInputs["amountUppercase"] = args?.amountUppercase;
            resourceInputs["checkHaveIBeenPwned"] = args?.checkHaveIBeenPwned;
            resourceInputs["checkStaticRules"] = args?.checkStaticRules;
            resourceInputs["checkZxcvbn"] = args?.checkZxcvbn;
            resourceInputs["errorMessage"] = args?.errorMessage;
            resourceInputs["executionLogging"] = args?.executionLogging;
            resourceInputs["hibpAllowedCount"] = args?.hibpAllowedCount;
            resourceInputs["lengthMin"] = args?.lengthMin;
            resourceInputs["name"] = args?.name;
            resourceInputs["passwordField"] = args?.passwordField;
            resourceInputs["policyPasswordId"] = args?.policyPasswordId;
            resourceInputs["symbolCharset"] = args?.symbolCharset;
            resourceInputs["zxcvbnScoreThreshold"] = args?.zxcvbnScoreThreshold;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyPassword.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicyPassword resources.
 */
export interface PolicyPasswordState {
    amountDigits?: pulumi.Input<number>;
    amountLowercase?: pulumi.Input<number>;
    amountSymbols?: pulumi.Input<number>;
    amountUppercase?: pulumi.Input<number>;
    /**
     * Defaults to `false`.
     */
    checkHaveIBeenPwned?: pulumi.Input<boolean>;
    /**
     * Defaults to `true`.
     */
    checkStaticRules?: pulumi.Input<boolean>;
    /**
     * Defaults to `false`.
     */
    checkZxcvbn?: pulumi.Input<boolean>;
    errorMessage?: pulumi.Input<string>;
    /**
     * Defaults to `false`.
     */
    executionLogging?: pulumi.Input<boolean>;
    /**
     * Defaults to `1`.
     */
    hibpAllowedCount?: pulumi.Input<number>;
    lengthMin?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * Defaults to `password`.
     */
    passwordField?: pulumi.Input<string>;
    policyPasswordId?: pulumi.Input<string>;
    /**
     * Defaults to `!\"#$%&'()*+,-./:;<=>?@[\]^_`{|}~`.
     */
    symbolCharset?: pulumi.Input<string>;
    /**
     * Defaults to `2`.
     */
    zxcvbnScoreThreshold?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a PolicyPassword resource.
 */
export interface PolicyPasswordArgs {
    amountDigits?: pulumi.Input<number>;
    amountLowercase?: pulumi.Input<number>;
    amountSymbols?: pulumi.Input<number>;
    amountUppercase?: pulumi.Input<number>;
    /**
     * Defaults to `false`.
     */
    checkHaveIBeenPwned?: pulumi.Input<boolean>;
    /**
     * Defaults to `true`.
     */
    checkStaticRules?: pulumi.Input<boolean>;
    /**
     * Defaults to `false`.
     */
    checkZxcvbn?: pulumi.Input<boolean>;
    errorMessage: pulumi.Input<string>;
    /**
     * Defaults to `false`.
     */
    executionLogging?: pulumi.Input<boolean>;
    /**
     * Defaults to `1`.
     */
    hibpAllowedCount?: pulumi.Input<number>;
    lengthMin?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * Defaults to `password`.
     */
    passwordField?: pulumi.Input<string>;
    policyPasswordId?: pulumi.Input<string>;
    /**
     * Defaults to `!\"#$%&'()*+,-./:;<=>?@[\]^_`{|}~`.
     */
    symbolCharset?: pulumi.Input<string>;
    /**
     * Defaults to `2`.
     */
    zxcvbnScoreThreshold?: pulumi.Input<number>;
}
