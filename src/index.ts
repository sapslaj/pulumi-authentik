// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationEntitlementArgs, ApplicationEntitlementState } from "./applicationEntitlement";
export type ApplicationEntitlement = import("./applicationEntitlement").ApplicationEntitlement;
export const ApplicationEntitlement: typeof import("./applicationEntitlement").ApplicationEntitlement = null as any;
utilities.lazyLoad(exports, ["ApplicationEntitlement"], () => require("./applicationEntitlement"));

export { BlueprintArgs, BlueprintState } from "./blueprint";
export type Blueprint = import("./blueprint").Blueprint;
export const Blueprint: typeof import("./blueprint").Blueprint = null as any;
utilities.lazyLoad(exports, ["Blueprint"], () => require("./blueprint"));

export { BrandArgs, BrandState } from "./brand";
export type Brand = import("./brand").Brand;
export const Brand: typeof import("./brand").Brand = null as any;
utilities.lazyLoad(exports, ["Brand"], () => require("./brand"));

export { CertificateKeyPairArgs, CertificateKeyPairState } from "./certificateKeyPair";
export type CertificateKeyPair = import("./certificateKeyPair").CertificateKeyPair;
export const CertificateKeyPair: typeof import("./certificateKeyPair").CertificateKeyPair = null as any;
utilities.lazyLoad(exports, ["CertificateKeyPair"], () => require("./certificateKeyPair"));

export { EnterpriseLicenseArgs, EnterpriseLicenseState } from "./enterpriseLicense";
export type EnterpriseLicense = import("./enterpriseLicense").EnterpriseLicense;
export const EnterpriseLicense: typeof import("./enterpriseLicense").EnterpriseLicense = null as any;
utilities.lazyLoad(exports, ["EnterpriseLicense"], () => require("./enterpriseLicense"));

export { EventRuleArgs, EventRuleState } from "./eventRule";
export type EventRule = import("./eventRule").EventRule;
export const EventRule: typeof import("./eventRule").EventRule = null as any;
utilities.lazyLoad(exports, ["EventRule"], () => require("./eventRule"));

export { EventTransportArgs, EventTransportState } from "./eventTransport";
export type EventTransport = import("./eventTransport").EventTransport;
export const EventTransport: typeof import("./eventTransport").EventTransport = null as any;
utilities.lazyLoad(exports, ["EventTransport"], () => require("./eventTransport"));

export { FlowArgs, FlowState } from "./flow";
export type Flow = import("./flow").Flow;
export const Flow: typeof import("./flow").Flow = null as any;
utilities.lazyLoad(exports, ["Flow"], () => require("./flow"));

export { FlowStageBindingArgs, FlowStageBindingState } from "./flowStageBinding";
export type FlowStageBinding = import("./flowStageBinding").FlowStageBinding;
export const FlowStageBinding: typeof import("./flowStageBinding").FlowStageBinding = null as any;
utilities.lazyLoad(exports, ["FlowStageBinding"], () => require("./flowStageBinding"));

export { GetBrandArgs, GetBrandResult, GetBrandOutputArgs } from "./getBrand";
export const getBrand: typeof import("./getBrand").getBrand = null as any;
export const getBrandOutput: typeof import("./getBrand").getBrandOutput = null as any;
utilities.lazyLoad(exports, ["getBrand","getBrandOutput"], () => require("./getBrand"));

export { GetCertificateKeyPairArgs, GetCertificateKeyPairResult, GetCertificateKeyPairOutputArgs } from "./getCertificateKeyPair";
export const getCertificateKeyPair: typeof import("./getCertificateKeyPair").getCertificateKeyPair = null as any;
export const getCertificateKeyPairOutput: typeof import("./getCertificateKeyPair").getCertificateKeyPairOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateKeyPair","getCertificateKeyPairOutput"], () => require("./getCertificateKeyPair"));

export { GetFlowArgs, GetFlowResult, GetFlowOutputArgs } from "./getFlow";
export const getFlow: typeof import("./getFlow").getFlow = null as any;
export const getFlowOutput: typeof import("./getFlow").getFlowOutput = null as any;
utilities.lazyLoad(exports, ["getFlow","getFlowOutput"], () => require("./getFlow"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetPropertyMappingProviderRacArgs, GetPropertyMappingProviderRacResult, GetPropertyMappingProviderRacOutputArgs } from "./getPropertyMappingProviderRac";
export const getPropertyMappingProviderRac: typeof import("./getPropertyMappingProviderRac").getPropertyMappingProviderRac = null as any;
export const getPropertyMappingProviderRacOutput: typeof import("./getPropertyMappingProviderRac").getPropertyMappingProviderRacOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyMappingProviderRac","getPropertyMappingProviderRacOutput"], () => require("./getPropertyMappingProviderRac"));

export { GetPropertyMappingProviderRadiusArgs, GetPropertyMappingProviderRadiusResult, GetPropertyMappingProviderRadiusOutputArgs } from "./getPropertyMappingProviderRadius";
export const getPropertyMappingProviderRadius: typeof import("./getPropertyMappingProviderRadius").getPropertyMappingProviderRadius = null as any;
export const getPropertyMappingProviderRadiusOutput: typeof import("./getPropertyMappingProviderRadius").getPropertyMappingProviderRadiusOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyMappingProviderRadius","getPropertyMappingProviderRadiusOutput"], () => require("./getPropertyMappingProviderRadius"));

export { GetPropertyMappingProviderSamlArgs, GetPropertyMappingProviderSamlResult, GetPropertyMappingProviderSamlOutputArgs } from "./getPropertyMappingProviderSaml";
export const getPropertyMappingProviderSaml: typeof import("./getPropertyMappingProviderSaml").getPropertyMappingProviderSaml = null as any;
export const getPropertyMappingProviderSamlOutput: typeof import("./getPropertyMappingProviderSaml").getPropertyMappingProviderSamlOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyMappingProviderSaml","getPropertyMappingProviderSamlOutput"], () => require("./getPropertyMappingProviderSaml"));

export { GetPropertyMappingProviderScimArgs, GetPropertyMappingProviderScimResult, GetPropertyMappingProviderScimOutputArgs } from "./getPropertyMappingProviderScim";
export const getPropertyMappingProviderScim: typeof import("./getPropertyMappingProviderScim").getPropertyMappingProviderScim = null as any;
export const getPropertyMappingProviderScimOutput: typeof import("./getPropertyMappingProviderScim").getPropertyMappingProviderScimOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyMappingProviderScim","getPropertyMappingProviderScimOutput"], () => require("./getPropertyMappingProviderScim"));

export { GetPropertyMappingProviderScopeArgs, GetPropertyMappingProviderScopeResult, GetPropertyMappingProviderScopeOutputArgs } from "./getPropertyMappingProviderScope";
export const getPropertyMappingProviderScope: typeof import("./getPropertyMappingProviderScope").getPropertyMappingProviderScope = null as any;
export const getPropertyMappingProviderScopeOutput: typeof import("./getPropertyMappingProviderScope").getPropertyMappingProviderScopeOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyMappingProviderScope","getPropertyMappingProviderScopeOutput"], () => require("./getPropertyMappingProviderScope"));

export { GetPropertyMappingSourceLdapArgs, GetPropertyMappingSourceLdapResult, GetPropertyMappingSourceLdapOutputArgs } from "./getPropertyMappingSourceLdap";
export const getPropertyMappingSourceLdap: typeof import("./getPropertyMappingSourceLdap").getPropertyMappingSourceLdap = null as any;
export const getPropertyMappingSourceLdapOutput: typeof import("./getPropertyMappingSourceLdap").getPropertyMappingSourceLdapOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyMappingSourceLdap","getPropertyMappingSourceLdapOutput"], () => require("./getPropertyMappingSourceLdap"));

export { GetProviderOauth2ConfigArgs, GetProviderOauth2ConfigResult, GetProviderOauth2ConfigOutputArgs } from "./getProviderOauth2Config";
export const getProviderOauth2Config: typeof import("./getProviderOauth2Config").getProviderOauth2Config = null as any;
export const getProviderOauth2ConfigOutput: typeof import("./getProviderOauth2Config").getProviderOauth2ConfigOutput = null as any;
utilities.lazyLoad(exports, ["getProviderOauth2Config","getProviderOauth2ConfigOutput"], () => require("./getProviderOauth2Config"));

export { GetProviderSamlMetadataArgs, GetProviderSamlMetadataResult, GetProviderSamlMetadataOutputArgs } from "./getProviderSamlMetadata";
export const getProviderSamlMetadata: typeof import("./getProviderSamlMetadata").getProviderSamlMetadata = null as any;
export const getProviderSamlMetadataOutput: typeof import("./getProviderSamlMetadata").getProviderSamlMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getProviderSamlMetadata","getProviderSamlMetadataOutput"], () => require("./getProviderSamlMetadata"));

export { GetRbacPermissionArgs, GetRbacPermissionResult, GetRbacPermissionOutputArgs } from "./getRbacPermission";
export const getRbacPermission: typeof import("./getRbacPermission").getRbacPermission = null as any;
export const getRbacPermissionOutput: typeof import("./getRbacPermission").getRbacPermissionOutput = null as any;
utilities.lazyLoad(exports, ["getRbacPermission","getRbacPermissionOutput"], () => require("./getRbacPermission"));

export { GetServiceConnectionKubernetesArgs, GetServiceConnectionKubernetesResult, GetServiceConnectionKubernetesOutputArgs } from "./getServiceConnectionKubernetes";
export const getServiceConnectionKubernetes: typeof import("./getServiceConnectionKubernetes").getServiceConnectionKubernetes = null as any;
export const getServiceConnectionKubernetesOutput: typeof import("./getServiceConnectionKubernetes").getServiceConnectionKubernetesOutput = null as any;
utilities.lazyLoad(exports, ["getServiceConnectionKubernetes","getServiceConnectionKubernetesOutput"], () => require("./getServiceConnectionKubernetes"));

export { GetSourceArgs, GetSourceResult, GetSourceOutputArgs } from "./getSource";
export const getSource: typeof import("./getSource").getSource = null as any;
export const getSourceOutput: typeof import("./getSource").getSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSource","getSourceOutput"], () => require("./getSource"));

export { GetStageArgs, GetStageResult, GetStageOutputArgs } from "./getStage";
export const getStage: typeof import("./getStage").getStage = null as any;
export const getStageOutput: typeof import("./getStage").getStageOutput = null as any;
utilities.lazyLoad(exports, ["getStage","getStageOutput"], () => require("./getStage"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GetWebauthnDeviceTypeArgs, GetWebauthnDeviceTypeResult, GetWebauthnDeviceTypeOutputArgs } from "./getWebauthnDeviceType";
export const getWebauthnDeviceType: typeof import("./getWebauthnDeviceType").getWebauthnDeviceType = null as any;
export const getWebauthnDeviceTypeOutput: typeof import("./getWebauthnDeviceType").getWebauthnDeviceTypeOutput = null as any;
utilities.lazyLoad(exports, ["getWebauthnDeviceType","getWebauthnDeviceTypeOutput"], () => require("./getWebauthnDeviceType"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { OutpostArgs, OutpostState } from "./outpost";
export type Outpost = import("./outpost").Outpost;
export const Outpost: typeof import("./outpost").Outpost = null as any;
utilities.lazyLoad(exports, ["Outpost"], () => require("./outpost"));

export { PolicyBindingArgs, PolicyBindingState } from "./policyBinding";
export type PolicyBinding = import("./policyBinding").PolicyBinding;
export const PolicyBinding: typeof import("./policyBinding").PolicyBinding = null as any;
utilities.lazyLoad(exports, ["PolicyBinding"], () => require("./policyBinding"));

export { PolicyDummyArgs, PolicyDummyState } from "./policyDummy";
export type PolicyDummy = import("./policyDummy").PolicyDummy;
export const PolicyDummy: typeof import("./policyDummy").PolicyDummy = null as any;
utilities.lazyLoad(exports, ["PolicyDummy"], () => require("./policyDummy"));

export { PolicyEventMatcherArgs, PolicyEventMatcherState } from "./policyEventMatcher";
export type PolicyEventMatcher = import("./policyEventMatcher").PolicyEventMatcher;
export const PolicyEventMatcher: typeof import("./policyEventMatcher").PolicyEventMatcher = null as any;
utilities.lazyLoad(exports, ["PolicyEventMatcher"], () => require("./policyEventMatcher"));

export { PolicyExpiryArgs, PolicyExpiryState } from "./policyExpiry";
export type PolicyExpiry = import("./policyExpiry").PolicyExpiry;
export const PolicyExpiry: typeof import("./policyExpiry").PolicyExpiry = null as any;
utilities.lazyLoad(exports, ["PolicyExpiry"], () => require("./policyExpiry"));

export { PolicyExpressionArgs, PolicyExpressionState } from "./policyExpression";
export type PolicyExpression = import("./policyExpression").PolicyExpression;
export const PolicyExpression: typeof import("./policyExpression").PolicyExpression = null as any;
utilities.lazyLoad(exports, ["PolicyExpression"], () => require("./policyExpression"));

export { PolicyGeoipArgs, PolicyGeoipState } from "./policyGeoip";
export type PolicyGeoip = import("./policyGeoip").PolicyGeoip;
export const PolicyGeoip: typeof import("./policyGeoip").PolicyGeoip = null as any;
utilities.lazyLoad(exports, ["PolicyGeoip"], () => require("./policyGeoip"));

export { PolicyPasswordArgs, PolicyPasswordState } from "./policyPassword";
export type PolicyPassword = import("./policyPassword").PolicyPassword;
export const PolicyPassword: typeof import("./policyPassword").PolicyPassword = null as any;
utilities.lazyLoad(exports, ["PolicyPassword"], () => require("./policyPassword"));

export { PolicyReputationArgs, PolicyReputationState } from "./policyReputation";
export type PolicyReputation = import("./policyReputation").PolicyReputation;
export const PolicyReputation: typeof import("./policyReputation").PolicyReputation = null as any;
utilities.lazyLoad(exports, ["PolicyReputation"], () => require("./policyReputation"));

export { PolicyUniquePasswordArgs, PolicyUniquePasswordState } from "./policyUniquePassword";
export type PolicyUniquePassword = import("./policyUniquePassword").PolicyUniquePassword;
export const PolicyUniquePassword: typeof import("./policyUniquePassword").PolicyUniquePassword = null as any;
utilities.lazyLoad(exports, ["PolicyUniquePassword"], () => require("./policyUniquePassword"));

export { PropertyMappingGoogleWorkspaceArgs, PropertyMappingGoogleWorkspaceState } from "./propertyMappingGoogleWorkspace";
export type PropertyMappingGoogleWorkspace = import("./propertyMappingGoogleWorkspace").PropertyMappingGoogleWorkspace;
export const PropertyMappingGoogleWorkspace: typeof import("./propertyMappingGoogleWorkspace").PropertyMappingGoogleWorkspace = null as any;
utilities.lazyLoad(exports, ["PropertyMappingGoogleWorkspace"], () => require("./propertyMappingGoogleWorkspace"));

export { PropertyMappingLdapArgs, PropertyMappingLdapState } from "./propertyMappingLdap";
export type PropertyMappingLdap = import("./propertyMappingLdap").PropertyMappingLdap;
export const PropertyMappingLdap: typeof import("./propertyMappingLdap").PropertyMappingLdap = null as any;
utilities.lazyLoad(exports, ["PropertyMappingLdap"], () => require("./propertyMappingLdap"));

export { PropertyMappingMicrosoftEntraArgs, PropertyMappingMicrosoftEntraState } from "./propertyMappingMicrosoftEntra";
export type PropertyMappingMicrosoftEntra = import("./propertyMappingMicrosoftEntra").PropertyMappingMicrosoftEntra;
export const PropertyMappingMicrosoftEntra: typeof import("./propertyMappingMicrosoftEntra").PropertyMappingMicrosoftEntra = null as any;
utilities.lazyLoad(exports, ["PropertyMappingMicrosoftEntra"], () => require("./propertyMappingMicrosoftEntra"));

export { PropertyMappingNotificationArgs, PropertyMappingNotificationState } from "./propertyMappingNotification";
export type PropertyMappingNotification = import("./propertyMappingNotification").PropertyMappingNotification;
export const PropertyMappingNotification: typeof import("./propertyMappingNotification").PropertyMappingNotification = null as any;
utilities.lazyLoad(exports, ["PropertyMappingNotification"], () => require("./propertyMappingNotification"));

export { PropertyMappingProviderGoogleWorkspaceArgs, PropertyMappingProviderGoogleWorkspaceState } from "./propertyMappingProviderGoogleWorkspace";
export type PropertyMappingProviderGoogleWorkspace = import("./propertyMappingProviderGoogleWorkspace").PropertyMappingProviderGoogleWorkspace;
export const PropertyMappingProviderGoogleWorkspace: typeof import("./propertyMappingProviderGoogleWorkspace").PropertyMappingProviderGoogleWorkspace = null as any;
utilities.lazyLoad(exports, ["PropertyMappingProviderGoogleWorkspace"], () => require("./propertyMappingProviderGoogleWorkspace"));

export { PropertyMappingProviderMicrosoftEntraArgs, PropertyMappingProviderMicrosoftEntraState } from "./propertyMappingProviderMicrosoftEntra";
export type PropertyMappingProviderMicrosoftEntra = import("./propertyMappingProviderMicrosoftEntra").PropertyMappingProviderMicrosoftEntra;
export const PropertyMappingProviderMicrosoftEntra: typeof import("./propertyMappingProviderMicrosoftEntra").PropertyMappingProviderMicrosoftEntra = null as any;
utilities.lazyLoad(exports, ["PropertyMappingProviderMicrosoftEntra"], () => require("./propertyMappingProviderMicrosoftEntra"));

export { PropertyMappingProviderRacArgs, PropertyMappingProviderRacState } from "./propertyMappingProviderRac";
export type PropertyMappingProviderRac = import("./propertyMappingProviderRac").PropertyMappingProviderRac;
export const PropertyMappingProviderRac: typeof import("./propertyMappingProviderRac").PropertyMappingProviderRac = null as any;
utilities.lazyLoad(exports, ["PropertyMappingProviderRac"], () => require("./propertyMappingProviderRac"));

export { PropertyMappingProviderRadiusArgs, PropertyMappingProviderRadiusState } from "./propertyMappingProviderRadius";
export type PropertyMappingProviderRadius = import("./propertyMappingProviderRadius").PropertyMappingProviderRadius;
export const PropertyMappingProviderRadius: typeof import("./propertyMappingProviderRadius").PropertyMappingProviderRadius = null as any;
utilities.lazyLoad(exports, ["PropertyMappingProviderRadius"], () => require("./propertyMappingProviderRadius"));

export { PropertyMappingProviderSamlArgs, PropertyMappingProviderSamlState } from "./propertyMappingProviderSaml";
export type PropertyMappingProviderSaml = import("./propertyMappingProviderSaml").PropertyMappingProviderSaml;
export const PropertyMappingProviderSaml: typeof import("./propertyMappingProviderSaml").PropertyMappingProviderSaml = null as any;
utilities.lazyLoad(exports, ["PropertyMappingProviderSaml"], () => require("./propertyMappingProviderSaml"));

export { PropertyMappingProviderScimArgs, PropertyMappingProviderScimState } from "./propertyMappingProviderScim";
export type PropertyMappingProviderScim = import("./propertyMappingProviderScim").PropertyMappingProviderScim;
export const PropertyMappingProviderScim: typeof import("./propertyMappingProviderScim").PropertyMappingProviderScim = null as any;
utilities.lazyLoad(exports, ["PropertyMappingProviderScim"], () => require("./propertyMappingProviderScim"));

export { PropertyMappingProviderScopeArgs, PropertyMappingProviderScopeState } from "./propertyMappingProviderScope";
export type PropertyMappingProviderScope = import("./propertyMappingProviderScope").PropertyMappingProviderScope;
export const PropertyMappingProviderScope: typeof import("./propertyMappingProviderScope").PropertyMappingProviderScope = null as any;
utilities.lazyLoad(exports, ["PropertyMappingProviderScope"], () => require("./propertyMappingProviderScope"));

export { PropertyMappingRacArgs, PropertyMappingRacState } from "./propertyMappingRac";
export type PropertyMappingRac = import("./propertyMappingRac").PropertyMappingRac;
export const PropertyMappingRac: typeof import("./propertyMappingRac").PropertyMappingRac = null as any;
utilities.lazyLoad(exports, ["PropertyMappingRac"], () => require("./propertyMappingRac"));

export { PropertyMappingRadiusArgs, PropertyMappingRadiusState } from "./propertyMappingRadius";
export type PropertyMappingRadius = import("./propertyMappingRadius").PropertyMappingRadius;
export const PropertyMappingRadius: typeof import("./propertyMappingRadius").PropertyMappingRadius = null as any;
utilities.lazyLoad(exports, ["PropertyMappingRadius"], () => require("./propertyMappingRadius"));

export { PropertyMappingSamlArgs, PropertyMappingSamlState } from "./propertyMappingSaml";
export type PropertyMappingSaml = import("./propertyMappingSaml").PropertyMappingSaml;
export const PropertyMappingSaml: typeof import("./propertyMappingSaml").PropertyMappingSaml = null as any;
utilities.lazyLoad(exports, ["PropertyMappingSaml"], () => require("./propertyMappingSaml"));

export { PropertyMappingScimArgs, PropertyMappingScimState } from "./propertyMappingScim";
export type PropertyMappingScim = import("./propertyMappingScim").PropertyMappingScim;
export const PropertyMappingScim: typeof import("./propertyMappingScim").PropertyMappingScim = null as any;
utilities.lazyLoad(exports, ["PropertyMappingScim"], () => require("./propertyMappingScim"));

export { PropertyMappingSourceKerberosArgs, PropertyMappingSourceKerberosState } from "./propertyMappingSourceKerberos";
export type PropertyMappingSourceKerberos = import("./propertyMappingSourceKerberos").PropertyMappingSourceKerberos;
export const PropertyMappingSourceKerberos: typeof import("./propertyMappingSourceKerberos").PropertyMappingSourceKerberos = null as any;
utilities.lazyLoad(exports, ["PropertyMappingSourceKerberos"], () => require("./propertyMappingSourceKerberos"));

export { PropertyMappingSourceLdapArgs, PropertyMappingSourceLdapState } from "./propertyMappingSourceLdap";
export type PropertyMappingSourceLdap = import("./propertyMappingSourceLdap").PropertyMappingSourceLdap;
export const PropertyMappingSourceLdap: typeof import("./propertyMappingSourceLdap").PropertyMappingSourceLdap = null as any;
utilities.lazyLoad(exports, ["PropertyMappingSourceLdap"], () => require("./propertyMappingSourceLdap"));

export { PropertyMappingSourceOauthArgs, PropertyMappingSourceOauthState } from "./propertyMappingSourceOauth";
export type PropertyMappingSourceOauth = import("./propertyMappingSourceOauth").PropertyMappingSourceOauth;
export const PropertyMappingSourceOauth: typeof import("./propertyMappingSourceOauth").PropertyMappingSourceOauth = null as any;
utilities.lazyLoad(exports, ["PropertyMappingSourceOauth"], () => require("./propertyMappingSourceOauth"));

export { PropertyMappingSourcePlexArgs, PropertyMappingSourcePlexState } from "./propertyMappingSourcePlex";
export type PropertyMappingSourcePlex = import("./propertyMappingSourcePlex").PropertyMappingSourcePlex;
export const PropertyMappingSourcePlex: typeof import("./propertyMappingSourcePlex").PropertyMappingSourcePlex = null as any;
utilities.lazyLoad(exports, ["PropertyMappingSourcePlex"], () => require("./propertyMappingSourcePlex"));

export { PropertyMappingSourceSamlArgs, PropertyMappingSourceSamlState } from "./propertyMappingSourceSaml";
export type PropertyMappingSourceSaml = import("./propertyMappingSourceSaml").PropertyMappingSourceSaml;
export const PropertyMappingSourceSaml: typeof import("./propertyMappingSourceSaml").PropertyMappingSourceSaml = null as any;
utilities.lazyLoad(exports, ["PropertyMappingSourceSaml"], () => require("./propertyMappingSourceSaml"));

export { PropertyMappingSourceScimArgs, PropertyMappingSourceScimState } from "./propertyMappingSourceScim";
export type PropertyMappingSourceScim = import("./propertyMappingSourceScim").PropertyMappingSourceScim;
export const PropertyMappingSourceScim: typeof import("./propertyMappingSourceScim").PropertyMappingSourceScim = null as any;
utilities.lazyLoad(exports, ["PropertyMappingSourceScim"], () => require("./propertyMappingSourceScim"));

export * from "./provider";
import { Provider } from "./provider";

export { ProviderGoogleWorkspaceArgs, ProviderGoogleWorkspaceState } from "./providerGoogleWorkspace";
export type ProviderGoogleWorkspace = import("./providerGoogleWorkspace").ProviderGoogleWorkspace;
export const ProviderGoogleWorkspace: typeof import("./providerGoogleWorkspace").ProviderGoogleWorkspace = null as any;
utilities.lazyLoad(exports, ["ProviderGoogleWorkspace"], () => require("./providerGoogleWorkspace"));

export { ProviderLdapArgs, ProviderLdapState } from "./providerLdap";
export type ProviderLdap = import("./providerLdap").ProviderLdap;
export const ProviderLdap: typeof import("./providerLdap").ProviderLdap = null as any;
utilities.lazyLoad(exports, ["ProviderLdap"], () => require("./providerLdap"));

export { ProviderMicrosoftEntraArgs, ProviderMicrosoftEntraState } from "./providerMicrosoftEntra";
export type ProviderMicrosoftEntra = import("./providerMicrosoftEntra").ProviderMicrosoftEntra;
export const ProviderMicrosoftEntra: typeof import("./providerMicrosoftEntra").ProviderMicrosoftEntra = null as any;
utilities.lazyLoad(exports, ["ProviderMicrosoftEntra"], () => require("./providerMicrosoftEntra"));

export { ProviderOauth2Args, ProviderOauth2State } from "./providerOauth2";
export type ProviderOauth2 = import("./providerOauth2").ProviderOauth2;
export const ProviderOauth2: typeof import("./providerOauth2").ProviderOauth2 = null as any;
utilities.lazyLoad(exports, ["ProviderOauth2"], () => require("./providerOauth2"));

export { ProviderProxyArgs, ProviderProxyState } from "./providerProxy";
export type ProviderProxy = import("./providerProxy").ProviderProxy;
export const ProviderProxy: typeof import("./providerProxy").ProviderProxy = null as any;
utilities.lazyLoad(exports, ["ProviderProxy"], () => require("./providerProxy"));

export { ProviderRacArgs, ProviderRacState } from "./providerRac";
export type ProviderRac = import("./providerRac").ProviderRac;
export const ProviderRac: typeof import("./providerRac").ProviderRac = null as any;
utilities.lazyLoad(exports, ["ProviderRac"], () => require("./providerRac"));

export { ProviderRadiusArgs, ProviderRadiusState } from "./providerRadius";
export type ProviderRadius = import("./providerRadius").ProviderRadius;
export const ProviderRadius: typeof import("./providerRadius").ProviderRadius = null as any;
utilities.lazyLoad(exports, ["ProviderRadius"], () => require("./providerRadius"));

export { ProviderSamlArgs, ProviderSamlState } from "./providerSaml";
export type ProviderSaml = import("./providerSaml").ProviderSaml;
export const ProviderSaml: typeof import("./providerSaml").ProviderSaml = null as any;
utilities.lazyLoad(exports, ["ProviderSaml"], () => require("./providerSaml"));

export { ProviderScimArgs, ProviderScimState } from "./providerScim";
export type ProviderScim = import("./providerScim").ProviderScim;
export const ProviderScim: typeof import("./providerScim").ProviderScim = null as any;
utilities.lazyLoad(exports, ["ProviderScim"], () => require("./providerScim"));

export { ProviderSsfArgs, ProviderSsfState } from "./providerSsf";
export type ProviderSsf = import("./providerSsf").ProviderSsf;
export const ProviderSsf: typeof import("./providerSsf").ProviderSsf = null as any;
utilities.lazyLoad(exports, ["ProviderSsf"], () => require("./providerSsf"));

export { RacEndpointArgs, RacEndpointState } from "./racEndpoint";
export type RacEndpoint = import("./racEndpoint").RacEndpoint;
export const RacEndpoint: typeof import("./racEndpoint").RacEndpoint = null as any;
utilities.lazyLoad(exports, ["RacEndpoint"], () => require("./racEndpoint"));

export { RbacInitialPermissionsArgs, RbacInitialPermissionsState } from "./rbacInitialPermissions";
export type RbacInitialPermissions = import("./rbacInitialPermissions").RbacInitialPermissions;
export const RbacInitialPermissions: typeof import("./rbacInitialPermissions").RbacInitialPermissions = null as any;
utilities.lazyLoad(exports, ["RbacInitialPermissions"], () => require("./rbacInitialPermissions"));

export { RbacPermissionRoleArgs, RbacPermissionRoleState } from "./rbacPermissionRole";
export type RbacPermissionRole = import("./rbacPermissionRole").RbacPermissionRole;
export const RbacPermissionRole: typeof import("./rbacPermissionRole").RbacPermissionRole = null as any;
utilities.lazyLoad(exports, ["RbacPermissionRole"], () => require("./rbacPermissionRole"));

export { RbacPermissionUserArgs, RbacPermissionUserState } from "./rbacPermissionUser";
export type RbacPermissionUser = import("./rbacPermissionUser").RbacPermissionUser;
export const RbacPermissionUser: typeof import("./rbacPermissionUser").RbacPermissionUser = null as any;
utilities.lazyLoad(exports, ["RbacPermissionUser"], () => require("./rbacPermissionUser"));

export { RbacRoleArgs, RbacRoleState } from "./rbacRole";
export type RbacRole = import("./rbacRole").RbacRole;
export const RbacRole: typeof import("./rbacRole").RbacRole = null as any;
utilities.lazyLoad(exports, ["RbacRole"], () => require("./rbacRole"));

export { ScopeMappingArgs, ScopeMappingState } from "./scopeMapping";
export type ScopeMapping = import("./scopeMapping").ScopeMapping;
export const ScopeMapping: typeof import("./scopeMapping").ScopeMapping = null as any;
utilities.lazyLoad(exports, ["ScopeMapping"], () => require("./scopeMapping"));

export { ServiceConnectionDockerArgs, ServiceConnectionDockerState } from "./serviceConnectionDocker";
export type ServiceConnectionDocker = import("./serviceConnectionDocker").ServiceConnectionDocker;
export const ServiceConnectionDocker: typeof import("./serviceConnectionDocker").ServiceConnectionDocker = null as any;
utilities.lazyLoad(exports, ["ServiceConnectionDocker"], () => require("./serviceConnectionDocker"));

export { ServiceConnectionKubernetesArgs, ServiceConnectionKubernetesState } from "./serviceConnectionKubernetes";
export type ServiceConnectionKubernetes = import("./serviceConnectionKubernetes").ServiceConnectionKubernetes;
export const ServiceConnectionKubernetes: typeof import("./serviceConnectionKubernetes").ServiceConnectionKubernetes = null as any;
utilities.lazyLoad(exports, ["ServiceConnectionKubernetes"], () => require("./serviceConnectionKubernetes"));

export { SourceKerberosArgs, SourceKerberosState } from "./sourceKerberos";
export type SourceKerberos = import("./sourceKerberos").SourceKerberos;
export const SourceKerberos: typeof import("./sourceKerberos").SourceKerberos = null as any;
utilities.lazyLoad(exports, ["SourceKerberos"], () => require("./sourceKerberos"));

export { SourceLdapArgs, SourceLdapState } from "./sourceLdap";
export type SourceLdap = import("./sourceLdap").SourceLdap;
export const SourceLdap: typeof import("./sourceLdap").SourceLdap = null as any;
utilities.lazyLoad(exports, ["SourceLdap"], () => require("./sourceLdap"));

export { SourceOauthArgs, SourceOauthState } from "./sourceOauth";
export type SourceOauth = import("./sourceOauth").SourceOauth;
export const SourceOauth: typeof import("./sourceOauth").SourceOauth = null as any;
utilities.lazyLoad(exports, ["SourceOauth"], () => require("./sourceOauth"));

export { SourcePlexArgs, SourcePlexState } from "./sourcePlex";
export type SourcePlex = import("./sourcePlex").SourcePlex;
export const SourcePlex: typeof import("./sourcePlex").SourcePlex = null as any;
utilities.lazyLoad(exports, ["SourcePlex"], () => require("./sourcePlex"));

export { SourceSamlArgs, SourceSamlState } from "./sourceSaml";
export type SourceSaml = import("./sourceSaml").SourceSaml;
export const SourceSaml: typeof import("./sourceSaml").SourceSaml = null as any;
utilities.lazyLoad(exports, ["SourceSaml"], () => require("./sourceSaml"));

export { StageAuthenticatorDuoArgs, StageAuthenticatorDuoState } from "./stageAuthenticatorDuo";
export type StageAuthenticatorDuo = import("./stageAuthenticatorDuo").StageAuthenticatorDuo;
export const StageAuthenticatorDuo: typeof import("./stageAuthenticatorDuo").StageAuthenticatorDuo = null as any;
utilities.lazyLoad(exports, ["StageAuthenticatorDuo"], () => require("./stageAuthenticatorDuo"));

export { StageAuthenticatorEmailArgs, StageAuthenticatorEmailState } from "./stageAuthenticatorEmail";
export type StageAuthenticatorEmail = import("./stageAuthenticatorEmail").StageAuthenticatorEmail;
export const StageAuthenticatorEmail: typeof import("./stageAuthenticatorEmail").StageAuthenticatorEmail = null as any;
utilities.lazyLoad(exports, ["StageAuthenticatorEmail"], () => require("./stageAuthenticatorEmail"));

export { StageAuthenticatorEndpointGdtcArgs, StageAuthenticatorEndpointGdtcState } from "./stageAuthenticatorEndpointGdtc";
export type StageAuthenticatorEndpointGdtc = import("./stageAuthenticatorEndpointGdtc").StageAuthenticatorEndpointGdtc;
export const StageAuthenticatorEndpointGdtc: typeof import("./stageAuthenticatorEndpointGdtc").StageAuthenticatorEndpointGdtc = null as any;
utilities.lazyLoad(exports, ["StageAuthenticatorEndpointGdtc"], () => require("./stageAuthenticatorEndpointGdtc"));

export { StageAuthenticatorSmsArgs, StageAuthenticatorSmsState } from "./stageAuthenticatorSms";
export type StageAuthenticatorSms = import("./stageAuthenticatorSms").StageAuthenticatorSms;
export const StageAuthenticatorSms: typeof import("./stageAuthenticatorSms").StageAuthenticatorSms = null as any;
utilities.lazyLoad(exports, ["StageAuthenticatorSms"], () => require("./stageAuthenticatorSms"));

export { StageAuthenticatorStaticArgs, StageAuthenticatorStaticState } from "./stageAuthenticatorStatic";
export type StageAuthenticatorStatic = import("./stageAuthenticatorStatic").StageAuthenticatorStatic;
export const StageAuthenticatorStatic: typeof import("./stageAuthenticatorStatic").StageAuthenticatorStatic = null as any;
utilities.lazyLoad(exports, ["StageAuthenticatorStatic"], () => require("./stageAuthenticatorStatic"));

export { StageAuthenticatorTotpArgs, StageAuthenticatorTotpState } from "./stageAuthenticatorTotp";
export type StageAuthenticatorTotp = import("./stageAuthenticatorTotp").StageAuthenticatorTotp;
export const StageAuthenticatorTotp: typeof import("./stageAuthenticatorTotp").StageAuthenticatorTotp = null as any;
utilities.lazyLoad(exports, ["StageAuthenticatorTotp"], () => require("./stageAuthenticatorTotp"));

export { StageAuthenticatorValidateArgs, StageAuthenticatorValidateState } from "./stageAuthenticatorValidate";
export type StageAuthenticatorValidate = import("./stageAuthenticatorValidate").StageAuthenticatorValidate;
export const StageAuthenticatorValidate: typeof import("./stageAuthenticatorValidate").StageAuthenticatorValidate = null as any;
utilities.lazyLoad(exports, ["StageAuthenticatorValidate"], () => require("./stageAuthenticatorValidate"));

export { StageAuthenticatorWebauthnArgs, StageAuthenticatorWebauthnState } from "./stageAuthenticatorWebauthn";
export type StageAuthenticatorWebauthn = import("./stageAuthenticatorWebauthn").StageAuthenticatorWebauthn;
export const StageAuthenticatorWebauthn: typeof import("./stageAuthenticatorWebauthn").StageAuthenticatorWebauthn = null as any;
utilities.lazyLoad(exports, ["StageAuthenticatorWebauthn"], () => require("./stageAuthenticatorWebauthn"));

export { StageCaptchaArgs, StageCaptchaState } from "./stageCaptcha";
export type StageCaptcha = import("./stageCaptcha").StageCaptcha;
export const StageCaptcha: typeof import("./stageCaptcha").StageCaptcha = null as any;
utilities.lazyLoad(exports, ["StageCaptcha"], () => require("./stageCaptcha"));

export { StageConsentArgs, StageConsentState } from "./stageConsent";
export type StageConsent = import("./stageConsent").StageConsent;
export const StageConsent: typeof import("./stageConsent").StageConsent = null as any;
utilities.lazyLoad(exports, ["StageConsent"], () => require("./stageConsent"));

export { StageDenyArgs, StageDenyState } from "./stageDeny";
export type StageDeny = import("./stageDeny").StageDeny;
export const StageDeny: typeof import("./stageDeny").StageDeny = null as any;
utilities.lazyLoad(exports, ["StageDeny"], () => require("./stageDeny"));

export { StageDummyArgs, StageDummyState } from "./stageDummy";
export type StageDummy = import("./stageDummy").StageDummy;
export const StageDummy: typeof import("./stageDummy").StageDummy = null as any;
utilities.lazyLoad(exports, ["StageDummy"], () => require("./stageDummy"));

export { StageEmailArgs, StageEmailState } from "./stageEmail";
export type StageEmail = import("./stageEmail").StageEmail;
export const StageEmail: typeof import("./stageEmail").StageEmail = null as any;
utilities.lazyLoad(exports, ["StageEmail"], () => require("./stageEmail"));

export { StageIdentificationArgs, StageIdentificationState } from "./stageIdentification";
export type StageIdentification = import("./stageIdentification").StageIdentification;
export const StageIdentification: typeof import("./stageIdentification").StageIdentification = null as any;
utilities.lazyLoad(exports, ["StageIdentification"], () => require("./stageIdentification"));

export { StageInvitationArgs, StageInvitationState } from "./stageInvitation";
export type StageInvitation = import("./stageInvitation").StageInvitation;
export const StageInvitation: typeof import("./stageInvitation").StageInvitation = null as any;
utilities.lazyLoad(exports, ["StageInvitation"], () => require("./stageInvitation"));

export { StageMutualTlsArgs, StageMutualTlsState } from "./stageMutualTls";
export type StageMutualTls = import("./stageMutualTls").StageMutualTls;
export const StageMutualTls: typeof import("./stageMutualTls").StageMutualTls = null as any;
utilities.lazyLoad(exports, ["StageMutualTls"], () => require("./stageMutualTls"));

export { StagePasswordArgs, StagePasswordState } from "./stagePassword";
export type StagePassword = import("./stagePassword").StagePassword;
export const StagePassword: typeof import("./stagePassword").StagePassword = null as any;
utilities.lazyLoad(exports, ["StagePassword"], () => require("./stagePassword"));

export { StagePromptArgs, StagePromptState } from "./stagePrompt";
export type StagePrompt = import("./stagePrompt").StagePrompt;
export const StagePrompt: typeof import("./stagePrompt").StagePrompt = null as any;
utilities.lazyLoad(exports, ["StagePrompt"], () => require("./stagePrompt"));

export { StagePromptFieldArgs, StagePromptFieldState } from "./stagePromptField";
export type StagePromptField = import("./stagePromptField").StagePromptField;
export const StagePromptField: typeof import("./stagePromptField").StagePromptField = null as any;
utilities.lazyLoad(exports, ["StagePromptField"], () => require("./stagePromptField"));

export { StageRedirectArgs, StageRedirectState } from "./stageRedirect";
export type StageRedirect = import("./stageRedirect").StageRedirect;
export const StageRedirect: typeof import("./stageRedirect").StageRedirect = null as any;
utilities.lazyLoad(exports, ["StageRedirect"], () => require("./stageRedirect"));

export { StageSourceArgs, StageSourceState } from "./stageSource";
export type StageSource = import("./stageSource").StageSource;
export const StageSource: typeof import("./stageSource").StageSource = null as any;
utilities.lazyLoad(exports, ["StageSource"], () => require("./stageSource"));

export { StageUserDeleteArgs, StageUserDeleteState } from "./stageUserDelete";
export type StageUserDelete = import("./stageUserDelete").StageUserDelete;
export const StageUserDelete: typeof import("./stageUserDelete").StageUserDelete = null as any;
utilities.lazyLoad(exports, ["StageUserDelete"], () => require("./stageUserDelete"));

export { StageUserLoginArgs, StageUserLoginState } from "./stageUserLogin";
export type StageUserLogin = import("./stageUserLogin").StageUserLogin;
export const StageUserLogin: typeof import("./stageUserLogin").StageUserLogin = null as any;
utilities.lazyLoad(exports, ["StageUserLogin"], () => require("./stageUserLogin"));

export { StageUserLogoutArgs, StageUserLogoutState } from "./stageUserLogout";
export type StageUserLogout = import("./stageUserLogout").StageUserLogout;
export const StageUserLogout: typeof import("./stageUserLogout").StageUserLogout = null as any;
utilities.lazyLoad(exports, ["StageUserLogout"], () => require("./stageUserLogout"));

export { StageUserWriteArgs, StageUserWriteState } from "./stageUserWrite";
export type StageUserWrite = import("./stageUserWrite").StageUserWrite;
export const StageUserWrite: typeof import("./stageUserWrite").StageUserWrite = null as any;
utilities.lazyLoad(exports, ["StageUserWrite"], () => require("./stageUserWrite"));

export { SystemSettingsArgs, SystemSettingsState } from "./systemSettings";
export type SystemSettings = import("./systemSettings").SystemSettings;
export const SystemSettings: typeof import("./systemSettings").SystemSettings = null as any;
utilities.lazyLoad(exports, ["SystemSettings"], () => require("./systemSettings"));

export { TokenArgs, TokenState } from "./token";
export type Token = import("./token").Token;
export const Token: typeof import("./token").Token = null as any;
utilities.lazyLoad(exports, ["Token"], () => require("./token"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "authentik:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "authentik:index/applicationEntitlement:ApplicationEntitlement":
                return new ApplicationEntitlement(name, <any>undefined, { urn })
            case "authentik:index/blueprint:Blueprint":
                return new Blueprint(name, <any>undefined, { urn })
            case "authentik:index/brand:Brand":
                return new Brand(name, <any>undefined, { urn })
            case "authentik:index/certificateKeyPair:CertificateKeyPair":
                return new CertificateKeyPair(name, <any>undefined, { urn })
            case "authentik:index/enterpriseLicense:EnterpriseLicense":
                return new EnterpriseLicense(name, <any>undefined, { urn })
            case "authentik:index/eventRule:EventRule":
                return new EventRule(name, <any>undefined, { urn })
            case "authentik:index/eventTransport:EventTransport":
                return new EventTransport(name, <any>undefined, { urn })
            case "authentik:index/flow:Flow":
                return new Flow(name, <any>undefined, { urn })
            case "authentik:index/flowStageBinding:FlowStageBinding":
                return new FlowStageBinding(name, <any>undefined, { urn })
            case "authentik:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "authentik:index/outpost:Outpost":
                return new Outpost(name, <any>undefined, { urn })
            case "authentik:index/policyBinding:PolicyBinding":
                return new PolicyBinding(name, <any>undefined, { urn })
            case "authentik:index/policyDummy:PolicyDummy":
                return new PolicyDummy(name, <any>undefined, { urn })
            case "authentik:index/policyEventMatcher:PolicyEventMatcher":
                return new PolicyEventMatcher(name, <any>undefined, { urn })
            case "authentik:index/policyExpiry:PolicyExpiry":
                return new PolicyExpiry(name, <any>undefined, { urn })
            case "authentik:index/policyExpression:PolicyExpression":
                return new PolicyExpression(name, <any>undefined, { urn })
            case "authentik:index/policyGeoip:PolicyGeoip":
                return new PolicyGeoip(name, <any>undefined, { urn })
            case "authentik:index/policyPassword:PolicyPassword":
                return new PolicyPassword(name, <any>undefined, { urn })
            case "authentik:index/policyReputation:PolicyReputation":
                return new PolicyReputation(name, <any>undefined, { urn })
            case "authentik:index/policyUniquePassword:PolicyUniquePassword":
                return new PolicyUniquePassword(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingGoogleWorkspace:PropertyMappingGoogleWorkspace":
                return new PropertyMappingGoogleWorkspace(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingLdap:PropertyMappingLdap":
                return new PropertyMappingLdap(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingMicrosoftEntra:PropertyMappingMicrosoftEntra":
                return new PropertyMappingMicrosoftEntra(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingNotification:PropertyMappingNotification":
                return new PropertyMappingNotification(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingProviderGoogleWorkspace:PropertyMappingProviderGoogleWorkspace":
                return new PropertyMappingProviderGoogleWorkspace(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingProviderMicrosoftEntra:PropertyMappingProviderMicrosoftEntra":
                return new PropertyMappingProviderMicrosoftEntra(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingProviderRac:PropertyMappingProviderRac":
                return new PropertyMappingProviderRac(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingProviderRadius:PropertyMappingProviderRadius":
                return new PropertyMappingProviderRadius(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingProviderSaml:PropertyMappingProviderSaml":
                return new PropertyMappingProviderSaml(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingProviderScim:PropertyMappingProviderScim":
                return new PropertyMappingProviderScim(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingProviderScope:PropertyMappingProviderScope":
                return new PropertyMappingProviderScope(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingRac:PropertyMappingRac":
                return new PropertyMappingRac(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingRadius:PropertyMappingRadius":
                return new PropertyMappingRadius(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingSaml:PropertyMappingSaml":
                return new PropertyMappingSaml(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingScim:PropertyMappingScim":
                return new PropertyMappingScim(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingSourceKerberos:PropertyMappingSourceKerberos":
                return new PropertyMappingSourceKerberos(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingSourceLdap:PropertyMappingSourceLdap":
                return new PropertyMappingSourceLdap(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingSourceOauth:PropertyMappingSourceOauth":
                return new PropertyMappingSourceOauth(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingSourcePlex:PropertyMappingSourcePlex":
                return new PropertyMappingSourcePlex(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingSourceSaml:PropertyMappingSourceSaml":
                return new PropertyMappingSourceSaml(name, <any>undefined, { urn })
            case "authentik:index/propertyMappingSourceScim:PropertyMappingSourceScim":
                return new PropertyMappingSourceScim(name, <any>undefined, { urn })
            case "authentik:index/providerGoogleWorkspace:ProviderGoogleWorkspace":
                return new ProviderGoogleWorkspace(name, <any>undefined, { urn })
            case "authentik:index/providerLdap:ProviderLdap":
                return new ProviderLdap(name, <any>undefined, { urn })
            case "authentik:index/providerMicrosoftEntra:ProviderMicrosoftEntra":
                return new ProviderMicrosoftEntra(name, <any>undefined, { urn })
            case "authentik:index/providerOauth2:ProviderOauth2":
                return new ProviderOauth2(name, <any>undefined, { urn })
            case "authentik:index/providerProxy:ProviderProxy":
                return new ProviderProxy(name, <any>undefined, { urn })
            case "authentik:index/providerRac:ProviderRac":
                return new ProviderRac(name, <any>undefined, { urn })
            case "authentik:index/providerRadius:ProviderRadius":
                return new ProviderRadius(name, <any>undefined, { urn })
            case "authentik:index/providerSaml:ProviderSaml":
                return new ProviderSaml(name, <any>undefined, { urn })
            case "authentik:index/providerScim:ProviderScim":
                return new ProviderScim(name, <any>undefined, { urn })
            case "authentik:index/providerSsf:ProviderSsf":
                return new ProviderSsf(name, <any>undefined, { urn })
            case "authentik:index/racEndpoint:RacEndpoint":
                return new RacEndpoint(name, <any>undefined, { urn })
            case "authentik:index/rbacInitialPermissions:RbacInitialPermissions":
                return new RbacInitialPermissions(name, <any>undefined, { urn })
            case "authentik:index/rbacPermissionRole:RbacPermissionRole":
                return new RbacPermissionRole(name, <any>undefined, { urn })
            case "authentik:index/rbacPermissionUser:RbacPermissionUser":
                return new RbacPermissionUser(name, <any>undefined, { urn })
            case "authentik:index/rbacRole:RbacRole":
                return new RbacRole(name, <any>undefined, { urn })
            case "authentik:index/scopeMapping:ScopeMapping":
                return new ScopeMapping(name, <any>undefined, { urn })
            case "authentik:index/serviceConnectionDocker:ServiceConnectionDocker":
                return new ServiceConnectionDocker(name, <any>undefined, { urn })
            case "authentik:index/serviceConnectionKubernetes:ServiceConnectionKubernetes":
                return new ServiceConnectionKubernetes(name, <any>undefined, { urn })
            case "authentik:index/sourceKerberos:SourceKerberos":
                return new SourceKerberos(name, <any>undefined, { urn })
            case "authentik:index/sourceLdap:SourceLdap":
                return new SourceLdap(name, <any>undefined, { urn })
            case "authentik:index/sourceOauth:SourceOauth":
                return new SourceOauth(name, <any>undefined, { urn })
            case "authentik:index/sourcePlex:SourcePlex":
                return new SourcePlex(name, <any>undefined, { urn })
            case "authentik:index/sourceSaml:SourceSaml":
                return new SourceSaml(name, <any>undefined, { urn })
            case "authentik:index/stageAuthenticatorDuo:StageAuthenticatorDuo":
                return new StageAuthenticatorDuo(name, <any>undefined, { urn })
            case "authentik:index/stageAuthenticatorEmail:StageAuthenticatorEmail":
                return new StageAuthenticatorEmail(name, <any>undefined, { urn })
            case "authentik:index/stageAuthenticatorEndpointGdtc:StageAuthenticatorEndpointGdtc":
                return new StageAuthenticatorEndpointGdtc(name, <any>undefined, { urn })
            case "authentik:index/stageAuthenticatorSms:StageAuthenticatorSms":
                return new StageAuthenticatorSms(name, <any>undefined, { urn })
            case "authentik:index/stageAuthenticatorStatic:StageAuthenticatorStatic":
                return new StageAuthenticatorStatic(name, <any>undefined, { urn })
            case "authentik:index/stageAuthenticatorTotp:StageAuthenticatorTotp":
                return new StageAuthenticatorTotp(name, <any>undefined, { urn })
            case "authentik:index/stageAuthenticatorValidate:StageAuthenticatorValidate":
                return new StageAuthenticatorValidate(name, <any>undefined, { urn })
            case "authentik:index/stageAuthenticatorWebauthn:StageAuthenticatorWebauthn":
                return new StageAuthenticatorWebauthn(name, <any>undefined, { urn })
            case "authentik:index/stageCaptcha:StageCaptcha":
                return new StageCaptcha(name, <any>undefined, { urn })
            case "authentik:index/stageConsent:StageConsent":
                return new StageConsent(name, <any>undefined, { urn })
            case "authentik:index/stageDeny:StageDeny":
                return new StageDeny(name, <any>undefined, { urn })
            case "authentik:index/stageDummy:StageDummy":
                return new StageDummy(name, <any>undefined, { urn })
            case "authentik:index/stageEmail:StageEmail":
                return new StageEmail(name, <any>undefined, { urn })
            case "authentik:index/stageIdentification:StageIdentification":
                return new StageIdentification(name, <any>undefined, { urn })
            case "authentik:index/stageInvitation:StageInvitation":
                return new StageInvitation(name, <any>undefined, { urn })
            case "authentik:index/stageMutualTls:StageMutualTls":
                return new StageMutualTls(name, <any>undefined, { urn })
            case "authentik:index/stagePassword:StagePassword":
                return new StagePassword(name, <any>undefined, { urn })
            case "authentik:index/stagePrompt:StagePrompt":
                return new StagePrompt(name, <any>undefined, { urn })
            case "authentik:index/stagePromptField:StagePromptField":
                return new StagePromptField(name, <any>undefined, { urn })
            case "authentik:index/stageRedirect:StageRedirect":
                return new StageRedirect(name, <any>undefined, { urn })
            case "authentik:index/stageSource:StageSource":
                return new StageSource(name, <any>undefined, { urn })
            case "authentik:index/stageUserDelete:StageUserDelete":
                return new StageUserDelete(name, <any>undefined, { urn })
            case "authentik:index/stageUserLogin:StageUserLogin":
                return new StageUserLogin(name, <any>undefined, { urn })
            case "authentik:index/stageUserLogout:StageUserLogout":
                return new StageUserLogout(name, <any>undefined, { urn })
            case "authentik:index/stageUserWrite:StageUserWrite":
                return new StageUserWrite(name, <any>undefined, { urn })
            case "authentik:index/systemSettings:SystemSettings":
                return new SystemSettings(name, <any>undefined, { urn })
            case "authentik:index/token:Token":
                return new Token(name, <any>undefined, { urn })
            case "authentik:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("authentik", "index/application", _module)
pulumi.runtime.registerResourceModule("authentik", "index/applicationEntitlement", _module)
pulumi.runtime.registerResourceModule("authentik", "index/blueprint", _module)
pulumi.runtime.registerResourceModule("authentik", "index/brand", _module)
pulumi.runtime.registerResourceModule("authentik", "index/certificateKeyPair", _module)
pulumi.runtime.registerResourceModule("authentik", "index/enterpriseLicense", _module)
pulumi.runtime.registerResourceModule("authentik", "index/eventRule", _module)
pulumi.runtime.registerResourceModule("authentik", "index/eventTransport", _module)
pulumi.runtime.registerResourceModule("authentik", "index/flow", _module)
pulumi.runtime.registerResourceModule("authentik", "index/flowStageBinding", _module)
pulumi.runtime.registerResourceModule("authentik", "index/group", _module)
pulumi.runtime.registerResourceModule("authentik", "index/outpost", _module)
pulumi.runtime.registerResourceModule("authentik", "index/policyBinding", _module)
pulumi.runtime.registerResourceModule("authentik", "index/policyDummy", _module)
pulumi.runtime.registerResourceModule("authentik", "index/policyEventMatcher", _module)
pulumi.runtime.registerResourceModule("authentik", "index/policyExpiry", _module)
pulumi.runtime.registerResourceModule("authentik", "index/policyExpression", _module)
pulumi.runtime.registerResourceModule("authentik", "index/policyGeoip", _module)
pulumi.runtime.registerResourceModule("authentik", "index/policyPassword", _module)
pulumi.runtime.registerResourceModule("authentik", "index/policyReputation", _module)
pulumi.runtime.registerResourceModule("authentik", "index/policyUniquePassword", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingGoogleWorkspace", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingLdap", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingMicrosoftEntra", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingNotification", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingProviderGoogleWorkspace", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingProviderMicrosoftEntra", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingProviderRac", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingProviderRadius", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingProviderSaml", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingProviderScim", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingProviderScope", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingRac", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingRadius", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingSaml", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingScim", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingSourceKerberos", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingSourceLdap", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingSourceOauth", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingSourcePlex", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingSourceSaml", _module)
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingSourceScim", _module)
pulumi.runtime.registerResourceModule("authentik", "index/providerGoogleWorkspace", _module)
pulumi.runtime.registerResourceModule("authentik", "index/providerLdap", _module)
pulumi.runtime.registerResourceModule("authentik", "index/providerMicrosoftEntra", _module)
pulumi.runtime.registerResourceModule("authentik", "index/providerOauth2", _module)
pulumi.runtime.registerResourceModule("authentik", "index/providerProxy", _module)
pulumi.runtime.registerResourceModule("authentik", "index/providerRac", _module)
pulumi.runtime.registerResourceModule("authentik", "index/providerRadius", _module)
pulumi.runtime.registerResourceModule("authentik", "index/providerSaml", _module)
pulumi.runtime.registerResourceModule("authentik", "index/providerScim", _module)
pulumi.runtime.registerResourceModule("authentik", "index/providerSsf", _module)
pulumi.runtime.registerResourceModule("authentik", "index/racEndpoint", _module)
pulumi.runtime.registerResourceModule("authentik", "index/rbacInitialPermissions", _module)
pulumi.runtime.registerResourceModule("authentik", "index/rbacPermissionRole", _module)
pulumi.runtime.registerResourceModule("authentik", "index/rbacPermissionUser", _module)
pulumi.runtime.registerResourceModule("authentik", "index/rbacRole", _module)
pulumi.runtime.registerResourceModule("authentik", "index/scopeMapping", _module)
pulumi.runtime.registerResourceModule("authentik", "index/serviceConnectionDocker", _module)
pulumi.runtime.registerResourceModule("authentik", "index/serviceConnectionKubernetes", _module)
pulumi.runtime.registerResourceModule("authentik", "index/sourceKerberos", _module)
pulumi.runtime.registerResourceModule("authentik", "index/sourceLdap", _module)
pulumi.runtime.registerResourceModule("authentik", "index/sourceOauth", _module)
pulumi.runtime.registerResourceModule("authentik", "index/sourcePlex", _module)
pulumi.runtime.registerResourceModule("authentik", "index/sourceSaml", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorDuo", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorEmail", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorEndpointGdtc", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorSms", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorStatic", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorTotp", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorValidate", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorWebauthn", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageCaptcha", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageConsent", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageDeny", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageDummy", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageEmail", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageIdentification", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageInvitation", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageMutualTls", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stagePassword", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stagePrompt", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stagePromptField", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageRedirect", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageSource", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageUserDelete", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageUserLogin", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageUserLogout", _module)
pulumi.runtime.registerResourceModule("authentik", "index/stageUserWrite", _module)
pulumi.runtime.registerResourceModule("authentik", "index/systemSettings", _module)
pulumi.runtime.registerResourceModule("authentik", "index/token", _module)
pulumi.runtime.registerResourceModule("authentik", "index/user", _module)
pulumi.runtime.registerResourcePackage("authentik", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:authentik") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
