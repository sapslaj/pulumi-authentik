// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PolicyUniquePassword extends pulumi.CustomResource {
    /**
     * Get an existing PolicyUniquePassword resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyUniquePasswordState, opts?: pulumi.CustomResourceOptions): PolicyUniquePassword {
        return new PolicyUniquePassword(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/policyUniquePassword:PolicyUniquePassword';

    /**
     * Returns true if the given object is an instance of PolicyUniquePassword.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyUniquePassword {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyUniquePassword.__pulumiType;
    }

    /**
     * Defaults to `false`.
     */
    declare public readonly executionLogging: pulumi.Output<boolean | undefined>;
    declare public readonly name: pulumi.Output<string>;
    /**
     * Defaults to `1`.
     */
    declare public readonly numHistoricalPasswords: pulumi.Output<number | undefined>;
    /**
     * Defaults to `password`.
     */
    declare public readonly passwordField: pulumi.Output<string | undefined>;
    declare public readonly policyUniquePasswordId: pulumi.Output<string>;

    /**
     * Create a PolicyUniquePassword resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PolicyUniquePasswordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyUniquePasswordArgs | PolicyUniquePasswordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyUniquePasswordState | undefined;
            resourceInputs["executionLogging"] = state?.executionLogging;
            resourceInputs["name"] = state?.name;
            resourceInputs["numHistoricalPasswords"] = state?.numHistoricalPasswords;
            resourceInputs["passwordField"] = state?.passwordField;
            resourceInputs["policyUniquePasswordId"] = state?.policyUniquePasswordId;
        } else {
            const args = argsOrState as PolicyUniquePasswordArgs | undefined;
            resourceInputs["executionLogging"] = args?.executionLogging;
            resourceInputs["name"] = args?.name;
            resourceInputs["numHistoricalPasswords"] = args?.numHistoricalPasswords;
            resourceInputs["passwordField"] = args?.passwordField;
            resourceInputs["policyUniquePasswordId"] = args?.policyUniquePasswordId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyUniquePassword.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicyUniquePassword resources.
 */
export interface PolicyUniquePasswordState {
    /**
     * Defaults to `false`.
     */
    executionLogging?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * Defaults to `1`.
     */
    numHistoricalPasswords?: pulumi.Input<number>;
    /**
     * Defaults to `password`.
     */
    passwordField?: pulumi.Input<string>;
    policyUniquePasswordId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicyUniquePassword resource.
 */
export interface PolicyUniquePasswordArgs {
    /**
     * Defaults to `false`.
     */
    executionLogging?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * Defaults to `1`.
     */
    numHistoricalPasswords?: pulumi.Input<number>;
    /**
     * Defaults to `password`.
     */
    passwordField?: pulumi.Input<string>;
    policyUniquePasswordId?: pulumi.Input<string>;
}
