// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RacEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing RacEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RacEndpointState, opts?: pulumi.CustomResourceOptions): RacEndpoint {
        return new RacEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authentik:index/racEndpoint:RacEndpoint';

    /**
     * Returns true if the given object is an instance of RacEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RacEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RacEndpoint.__pulumiType;
    }

    declare public readonly host: pulumi.Output<string>;
    /**
     * Defaults to `0`.
     */
    declare public readonly maximumConnections: pulumi.Output<number | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly propertyMappings: pulumi.Output<string[] | undefined>;
    /**
     * Allowed values: - `rdp` - `vnc` - `ssh`
     */
    declare public readonly protocol: pulumi.Output<string>;
    declare public readonly protocolProvider: pulumi.Output<number>;
    declare public readonly racEndpointId: pulumi.Output<string>;
    /**
     * JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
     */
    declare public readonly settings: pulumi.Output<string | undefined>;

    /**
     * Create a RacEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RacEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RacEndpointArgs | RacEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RacEndpointState | undefined;
            resourceInputs["host"] = state?.host;
            resourceInputs["maximumConnections"] = state?.maximumConnections;
            resourceInputs["name"] = state?.name;
            resourceInputs["propertyMappings"] = state?.propertyMappings;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["protocolProvider"] = state?.protocolProvider;
            resourceInputs["racEndpointId"] = state?.racEndpointId;
            resourceInputs["settings"] = state?.settings;
        } else {
            const args = argsOrState as RacEndpointArgs | undefined;
            if (args?.host === undefined && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if (args?.protocolProvider === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocolProvider'");
            }
            resourceInputs["host"] = args?.host;
            resourceInputs["maximumConnections"] = args?.maximumConnections;
            resourceInputs["name"] = args?.name;
            resourceInputs["propertyMappings"] = args?.propertyMappings;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["protocolProvider"] = args?.protocolProvider;
            resourceInputs["racEndpointId"] = args?.racEndpointId;
            resourceInputs["settings"] = args?.settings;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RacEndpoint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RacEndpoint resources.
 */
export interface RacEndpointState {
    host?: pulumi.Input<string>;
    /**
     * Defaults to `0`.
     */
    maximumConnections?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allowed values: - `rdp` - `vnc` - `ssh`
     */
    protocol?: pulumi.Input<string>;
    protocolProvider?: pulumi.Input<number>;
    racEndpointId?: pulumi.Input<string>;
    /**
     * JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
     */
    settings?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RacEndpoint resource.
 */
export interface RacEndpointArgs {
    host: pulumi.Input<string>;
    /**
     * Defaults to `0`.
     */
    maximumConnections?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allowed values: - `rdp` - `vnc` - `ssh`
     */
    protocol: pulumi.Input<string>;
    protocolProvider: pulumi.Input<number>;
    racEndpointId?: pulumi.Input<string>;
    /**
     * JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
     */
    settings?: pulumi.Input<string>;
}
